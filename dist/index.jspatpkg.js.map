{"version":3,"file":"index.jspatpkg.js","mappings":"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","sources":["webpack://@jspatcher/package-live/./src/index.ts","webpack://@jspatcher/package-live/./src/objects/base.ts","webpack://@jspatcher/package-live/./src/objects/button.ts","webpack://@jspatcher/package-live/./src/objects/dial.ts","webpack://@jspatcher/package-live/./src/objects/gain.ts","webpack://@jspatcher/package-live/./src/objects/meter.ts","webpack://@jspatcher/package-live/./src/objects/numbox.ts","webpack://@jspatcher/package-live/./src/objects/slider.ts","webpack://@jspatcher/package-live/./src/objects/tab.ts","webpack://@jspatcher/package-live/./src/objects/text.ts","webpack://@jspatcher/package-live/./src/objects/toggle.ts","webpack://@jspatcher/package-live/./src/package-info.ts","webpack://@jspatcher/package-live/./src/sdk.ts","webpack://@jspatcher/package-live/./src/ui/base.tsx","webpack://@jspatcher/package-live/./src/ui/button.tsx","webpack://@jspatcher/package-live/./src/ui/dial.tsx","webpack://@jspatcher/package-live/./src/ui/gain.tsx","webpack://@jspatcher/package-live/./src/ui/meter.tsx","webpack://@jspatcher/package-live/./src/ui/numbox.tsx","webpack://@jspatcher/package-live/./src/ui/slider.tsx","webpack://@jspatcher/package-live/./src/ui/tab.tsx","webpack://@jspatcher/package-live/./src/ui/text.tsx","webpack://@jspatcher/package-live/./src/ui/toggle.tsx","webpack://@jspatcher/package-live/webpack/bootstrap","webpack://@jspatcher/package-live/webpack/runtime/create fake namespace object","webpack://@jspatcher/package-live/webpack/runtime/define property getters","webpack://@jspatcher/package-live/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-live/webpack/runtime/make namespace object","webpack://@jspatcher/package-live/./src/index.jspatpkg.ts"],"sourcesContent":["import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import type { IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { author, name, version, description } from \"../index\";\r\nimport { BaseObject } from \"../sdk\";\r\nimport LiveObjectUI, { getDisplayValue, LiveObjectUIState } from \"../ui/base\";\r\n\r\nexport interface LiveObjectState {\r\n    value: number;\r\n}\r\nexport interface LiveObjectInternalState {\r\n    displayValue: string;\r\n}\r\nexport interface LiveObjectEventMap {\r\n    \"changeFromUI\": { value: number; displayValue: string };\r\n};\r\n\r\nexport interface LiveObjectProps extends Omit<LiveObjectUIState, \"value\"> {}\r\n\r\nexport default class LiveObject<\r\n    D = {},\r\n    S extends Partial<LiveObjectState> & Record<string, any> = {},\r\n    I extends any[] = any[],\r\n    O extends any[] = any[],\r\n    A extends any[] = any[],\r\n    P extends Partial<LiveObjectProps> & Record<string, any> = {},\r\n    U extends Partial<LiveObjectUIState> & Record<string, any> = {},\r\n    E extends Partial<LiveObjectEventMap> & Record<string, any> = {}\r\n> extends BaseObject<D, S & LiveObjectState, I, O, A, P & LiveObjectProps, U & LiveObjectUIState, E & LiveObjectEventMap> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n    static props: IPropsMeta<Partial<LiveObjectProps>> = {\r\n        min: {\r\n            type: \"number\",\r\n            default: 0,\r\n            description: \"Minimum value\",\r\n            isUIState: true\r\n        },\r\n        max: {\r\n            type: \"number\",\r\n            default: 127,\r\n            description: \"Maximum value\",\r\n            isUIState: true\r\n        },\r\n        step: {\r\n            type: \"number\",\r\n            default: 1,\r\n            description: \"Value change step\",\r\n            isUIState: true\r\n        },\r\n        type: {\r\n            type: \"enum\",\r\n            enums: [\"enum\", \"float\", \"int\"],\r\n            default: \"int\",\r\n            description: \"Value type\",\r\n            isUIState: true\r\n        },\r\n        enums: {\r\n            type: \"object\",\r\n            default: [\"\"],\r\n            description: \"Enum values\",\r\n            isUIState: true\r\n        },\r\n        active: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Active state\",\r\n            isUIState: true\r\n        },\r\n        focus: {\r\n            type: \"boolean\",\r\n            default: false,\r\n            description: \"Focus state\",\r\n            isUIState: true\r\n        },\r\n        shortName: {\r\n            type: \"string\",\r\n            default: \"\",\r\n            description: \"Short name to display\",\r\n            isUIState: true\r\n        },\r\n        longName: {\r\n            type: \"string\",\r\n            default: \"\",\r\n            description: \"Long name to display\",\r\n            isUIState: true\r\n        },\r\n        unitStyle: {\r\n            type: \"enum\",\r\n            enums: [\"float\", \"int\", \"time\", \"hertz\", \"decibel\", \"%\", \"pan\", \"semitones\", \"midi\", \"custom\", \"native\"],\r\n            default: \"int\",\r\n            description: \"Style of unit to display\",\r\n            isUIState: true\r\n        },\r\n        units: {\r\n            type: \"string\",\r\n            default: \"\",\r\n            description: \"If unitStyle set to custom, display this as unit\",\r\n            isUIState: true\r\n        },\r\n        exponent: {\r\n            type: \"number\",\r\n            default: 0,\r\n            description: \"UI modulation bpf, 0 for linear\",\r\n            isUIState: true\r\n        },\r\n        speedLim: {\r\n            type: \"number\",\r\n            default: 16,\r\n            description: \"Value output speed limit in ms\",\r\n            isUIState: true\r\n        },\r\n        frameRate: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"UI refresh rate\",\r\n            isUIState: true\r\n        }\r\n    };\r\n    static UI: typeof LiveObjectUI;\r\n    state = { value: 0 } as S & LiveObjectState;\r\n    _: LiveObjectInternalState = { displayValue: \"0\" };\r\n    /**\r\n     * Get a nearest valid number\r\n     */\r\n    toValidValue(value: number): number {\r\n        const min = this.getProp(\"min\");\r\n        const max = this.getProp(\"max\");\r\n        const step = this.getProp(\"step\");\r\n        const v = Math.min(max, Math.max(min, value));\r\n        return min + Math.floor((v - min) / step) * step;\r\n    }\r\n    toDisplayValue(value: number): string {\r\n        const { type, unitStyle, units, enums } = this.props;\r\n        return getDisplayValue(value, type, unitStyle, units, enums);\r\n    }\r\n    validateValue(valueIn: number, id?: string) {\r\n        const value = this.toValidValue(valueIn || 0);\r\n        if (value === this.state.value) return;\r\n        this.setState({ value } as S & LiveObjectState, id);\r\n        this._.displayValue = this.toDisplayValue(this.state.value);\r\n    }\r\n    onChangeFromUI(e: { value: number; displayValue: string }) {\r\n        this.emit(\"changeFromUI\", e);\r\n    }\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"updateProps\", (props) => {\r\n            if (typeof props.max !== \"undefined\" || typeof props.min !== \"undefined\" || typeof props.step !== \"undefined\") {\r\n                const lastValue = this.state.value;\r\n                this.validateValue(this.state.value);\r\n                if (lastValue !== this.state.value) this.updateUI({ value: this.state.value } as any);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Bang } from \"../sdk\";\nimport LiveButtonUI, { LiveButtonUIState } from \"../ui/button\";\nimport LiveObject, { LiveObjectProps } from \"./base\";\n\nexport interface LiveButtonProps extends LiveObjectProps {\n    bgColor: string;\n    activeBgColor: string;\n    bgOnColor: string;\n    activeBgOnColor: string;\n    borderColor: string;\n    focusBorderColor: string;\n    transition: \"Zero->One\" | \"One->Zero\" | \"Both\";\n}\nexport default class LiveButton extends LiveObject<{}, {}, [any], [Bang, number], [number], LiveButtonProps, LiveButtonUIState> {\n    static description = \"Button\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"number\",\n        description: \"Output a bang following transition prop.\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"bang\",\n        description: \"Bang\"\n    }, {\n        type: \"number\",\n        description: \"Current value\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 0,\n        description: \"Initial value\"\n    }];\n    static props: IPropsMeta<Partial<LiveButtonProps>> = {\n        shortName: {\n            type: \"string\",\n            default: \"live.button\",\n            description: \"Short name to display\",\n            isUIState: true\n        },\n        longName: {\n            type: \"string\",\n            default: \"live.button\",\n            description: \"Long name to display\",\n            isUIState: true\n        },\n        max: {\n            type: \"number\",\n            default: 1,\n            description: \"Maximum value\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgba(90, 90, 90, 1)\",\n            description: \"Background color (inactive)\",\n            isUIState: true\n        },\n        activeBgColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Background color (active)\",\n            isUIState: true\n        },\n        bgOnColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Background color (on / inactive)\",\n            isUIState: true\n        },\n        activeBgOnColor: {\n            type: \"color\",\n            default: \"rgba(109, 215, 255, 1)\",\n            description: \"Background color (on / active)\",\n            isUIState: true\n        },\n        borderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (unfocus)\",\n            isUIState: true\n        },\n        focusBorderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (focus)\",\n            isUIState: true\n        },\n        transition: {\n            type: \"enum\",\n            enums: [\"Zero->One\", \"One->Zero\", \"Both\"],\n            default: \"Zero->One\",\n            description: \"Specifies when a bang message will be sent to the outlet\"\n        }\n    };\n    static UI = LiveButtonUI;\n    subscribe() {\n        super.subscribe();\n        const validateAndUpdateUI = (value = 0, id?: string) => {\n            this.validateValue(value, id);\n            this.updateUI({ value: this.state.value });\n        }\n        const handleUpdateArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                validateAndUpdateUI(+!!args[0]);\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n            validateAndUpdateUI(+!!this.args[0]);\n        });\n        this.on(\"updateArgs\", handleUpdateArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                validateAndUpdateUI(+!!data);\n                this.outlet(1, this.state.value);\n                if (this.state.value && this.getProp(\"transition\") !== \"One->Zero\") this.outlet(0, new Bang());\n            }\n        });\n        this.on(\"changeFromUI\", ({ value }) => {\n            const lastValue = this.state.value;\n            validateAndUpdateUI(value);\n            this.outlet(1, value);\n            const transition = this.getProp(\"transition\");\n            const b01 = transition !== \"One->Zero\";\n            const b10 = transition !== \"Zero->One\";\n            if ((b01 && lastValue < this.state.value) || (b10 && lastValue > this.state.value)) this.outlet(0, new Bang());\n        });\n        this.on(\"updateState\", ({ state: { value }, id }) => {\n            validateAndUpdateUI(value, id);\n            this.outlet(1, this.state.value);\n            if (this.state.value && this.getProp(\"transition\") !== \"One->Zero\") this.outlet(0, new Bang());\n        });\n    }\n}\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Bang, isBang } from \"../sdk\";\nimport LiveDialUI, { LiveDialUIState } from \"../ui/dial\";\nimport LiveObject, { LiveObjectProps } from \"./base\";\n\nexport interface LiveDialProps extends LiveObjectProps {\n    borderColor: string;\n    focusBorderColor: string;\n    dialColor: string;\n    activeDialColor: string;\n    fgDialColor: string;\n    activeFgDialColor: string;\n    needleColor: string;\n    activeNeedleColor: string;\n    panelColor: string;\n    triBorderColor: string;\n    triColor: string;\n    textColor: string;\n    fontFamily: string;\n    fontSize: number;\n    fontFace: \"regular\" | \"bold\" | \"italic\" | \"bold italic\";\n    appearance: \"vertical\" | \"tiny\" | \"panel\";\n    showName: boolean;\n    showNumber: boolean;\n    triangle: boolean;\n}\nexport default class LiveDial extends LiveObject<{}, {}, [number | Bang, number], [number, string], [number], LiveDialProps, LiveDialUIState> {\n    static description = \"Dial knob\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"number\",\n        description: \"Set and output the value\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"Set without output the value\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Number value\"\n    }, {\n        type: \"string\",\n        description: \"Display value\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 0,\n        description: \"Initial value\"\n    }];\n    static props: IPropsMeta<Partial<LiveDialProps>> = {\n        shortName: {\n            type: \"string\",\n            default: \"live.dial\",\n            description: \"Short name to display\",\n            isUIState: true\n        },\n        longName: {\n            type: \"string\",\n            default: \"live.dial\",\n            description: \"Long name to display\",\n            isUIState: true\n        },\n        borderColor: {\n            type: \"color\",\n            default: \"rgba(90, 90, 90, 1)\",\n            description: \"Border color (unfocus)\",\n            isUIState: true\n        },\n        focusBorderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (focus)\",\n            isUIState: true\n        },\n        dialColor: {\n            type: \"color\",\n            default: \"rgba(109, 215, 255, 1)\",\n            description: \"Dial color (inactive)\",\n            isUIState: true\n        },\n        activeDialColor: {\n            type: \"color\",\n            default: \"rgba(109, 215, 255, 1)\",\n            description: \"Dial color (active)\",\n            isUIState: true\n        },\n        fgDialColor: {\n            type: \"color\",\n            default: \"rgba(105, 105, 105, 1)\",\n            description: \"Forground dial color (inactive)\",\n            isUIState: true\n        },\n        activeFgDialColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Forground dial color (active)\",\n            isUIState: true\n        },\n        needleColor: {\n            type: \"color\",\n            default: \"rgba(105, 105, 105, 1)\",\n            description: \"Needle color (inactive)\",\n            isUIState: true\n        },\n        activeNeedleColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Needle color (active)\",\n            isUIState: true\n        },\n        panelColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Panel color\",\n            isUIState: true\n        },\n        triBorderColor: {\n            type: \"color\",\n            default: \"rgba(50, 50, 50, 1)\",\n            description: \"Triangle border color\",\n            isUIState: true\n        },\n        triColor: {\n            type: \"color\",\n            default: \"rgba(40, 40, 40, 1)\",\n            description: \"Triangle color (inactive)\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"rgba(255, 255, 255, 1)\",\n            description: \"Text color\",\n            isUIState: true\n        },\n        fontFamily: {\n            type: \"enum\",\n            enums: [\"Lato\", \"Georgia\", \"Times New Roman\", \"Arial\", \"Tahoma\", \"Verdana\", \"Courier New\"],\n            default: \"Arial\",\n            description: \"Font family\",\n            isUIState: true\n        },\n        fontSize: {\n            type: \"number\",\n            default: 10,\n            description: \"Text font size\",\n            isUIState: true\n        },\n        fontFace: {\n            type: \"enum\",\n            enums: [\"regular\", \"bold\", \"italic\", \"bold italic\"],\n            default: \"regular\",\n            description: \"Text style\",\n            isUIState: true\n        },\n        appearance: {\n            type: \"enum\",\n            enums: [\"vertical\", \"tiny\", \"panel\"],\n            default: \"vertical\",\n            description: \"Dial style\",\n            isUIState: true\n        },\n        showName: {\n            type: \"boolean\",\n            default: true,\n            description: \"Display name\",\n            isUIState: true\n        },\n        showNumber: {\n            type: \"boolean\",\n            default: true,\n            description: \"Display number as text\",\n            isUIState: true\n        },\n        triangle: {\n            type: \"boolean\",\n            default: false,\n            description: \"Display triangle\",\n            isUIState: true\n        }\n    };\n    static UI = LiveDialUI;\n    subscribe() {\n        super.subscribe();\n        const validateAndUpdateUI = (value = 0, id?: string) => {\n            this.validateValue(value, id);\n            this.updateUI({ value: this.state.value });\n        }\n        const handleUpdateArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                validateAndUpdateUI(args[0]);\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            validateAndUpdateUI(this.args[0] || 0);\n        });\n        this.on(\"updateArgs\", handleUpdateArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    validateAndUpdateUI(+data);\n                }\n                this.outletAll([this.state.value, this._.displayValue]);\n            } else if (inlet === 1) {\n                validateAndUpdateUI(+data);\n            }\n        });\n        this.on(\"changeFromUI\", ({ value }) => {\n            this.validateValue(value);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n        this.on(\"updateState\", ({ state: { value }, id }) => {\n            validateAndUpdateUI(value, id);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n    }\n}\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport LiveObject, { LiveObjectInternalState } from \"./base\";\nimport LiveGainUI, { LiveGainUIState } from \"../ui/gain\";\nimport { Bang, isBang, MathUtils, TemporalAnalyserNode } from \"../sdk\";\nimport type { LiveSliderProps } from \"./slider\";\nimport type { LiveMeterProps } from \"./meter\";\n\nexport interface LiveGainProps extends Omit<LiveSliderProps, \"sliderColor\">, LiveMeterProps {\n    metering: \"postFader\" | \"preFader\";\n    interp: number;\n}\nexport interface LiveGainInternalState extends LiveObjectInternalState {\n    analyserNode: TemporalAnalyserNode;\n    bypassNode: GainNode;\n    gainNode: GainNode;\n    $requestTimer: number;\n    levels: number[];\n}\n\nexport default class LiveGain extends LiveObject<{}, {}, [number | Bang, number], [undefined, number, string, number[]], [number], LiveGainProps, LiveGainUIState> {\n    static description = \"Gain slider and monitor\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal in, number to set gain\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Audio out\"\n    }, {\n        type: \"number\",\n        description: \"Number value\"\n    }, {\n        type: \"string\",\n        description: \"Display value\"\n    }, {\n        type: \"object\",\n        description: \"Amplitude value: number[]\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 0,\n        description: \"Initial value\"\n    }];\n    static props: IPropsMeta<Partial<LiveGainProps>> = {\n        shortName: {\n            type: \"string\",\n            default: \"live.gain\",\n            description: \"Short name to display\",\n            isUIState: true\n        },\n        longName: {\n            type: \"string\",\n            default: \"live.gain\",\n            description: \"Long name to display\",\n            isUIState: true\n        },\n        min: {\n            type: \"number\",\n            default: -70,\n            description: \"Minimum value (dB)\",\n            isUIState: true\n        },\n        max: {\n            type: \"number\",\n            default: 6,\n            description: \"Maximum value (dB)\",\n            isUIState: true\n        },\n        step: {\n            type: \"number\",\n            default: 0.01,\n            description: \"Value change step\",\n            isUIState: true\n        },\n        type: {\n            type: \"enum\",\n            enums: [\"enum\", \"float\", \"int\"],\n            default: \"float\",\n            description: \"Value type\",\n            isUIState: true\n        },\n        unitStyle: {\n            type: \"enum\",\n            enums: [\"float\", \"int\", \"time\", \"hertz\", \"decibel\", \"%\", \"pan\", \"semitones\", \"midi\", \"custom\", \"native\"],\n            default: \"decibel\",\n            description: \"Style of unit to display\",\n            isUIState: true\n        },\n        relative: {\n            type: \"boolean\",\n            default: false,\n            description: \"Modify value use relative mouse move\",\n            isUIState: true\n        },\n        triBorderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Triangle border color\",\n            isUIState: true\n        },\n        triColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Triangle color\",\n            isUIState: true\n        },\n        triOnColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Triangle color while on\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"rgba(255, 255, 255, 1)\",\n            description: \"Text color\",\n            isUIState: true\n        },\n        fontFamily: {\n            type: \"enum\",\n            enums: [\"Lato\", \"Georgia\", \"Times New Roman\", \"Arial\", \"Tahoma\", \"Verdana\", \"Courier New\"],\n            default: \"Arial\",\n            description: \"Font family\",\n            isUIState: true\n        },\n        fontSize: {\n            type: \"number\",\n            default: 10,\n            description: \"Text font size\",\n            isUIState: true\n        },\n        fontFace: {\n            type: \"enum\",\n            enums: [\"regular\", \"bold\", \"italic\", \"bold italic\"],\n            default: \"regular\",\n            description: \"Text style\",\n            isUIState: true\n        },\n        orientation: {\n            type: \"enum\",\n            enums: [\"vertical\", \"horizontal\"],\n            default: \"horizontal\",\n            description: \"Slider orientation\",\n            isUIState: true\n        },\n        showName: {\n            type: \"boolean\",\n            default: true,\n            description: \"Display name\",\n            isUIState: true\n        },\n        showNumber: {\n            type: \"boolean\",\n            default: true,\n            description: \"Display number as text\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        inactiveColdColor: {\n            type: \"color\",\n            default: \"rgb(130, 130, 130)\",\n            description: \"Cold color (inactive)\",\n            isUIState: true\n        },\n        inactiveWarmColor: {\n            type: \"color\",\n            default: \"rgb(149, 149, 149)\",\n            description: \"Warm color (inactive)\",\n            isUIState: true\n        },\n        coldColor: {\n            type: \"color\",\n            default: \"rgb(12, 248, 100)\",\n            description: \"Cold color (active)\",\n            isUIState: true\n        },\n        warmColor: {\n            type: \"color\",\n            default: \"rgb(195, 248, 100)\",\n            description: \"Warm color (active)\",\n            isUIState: true\n        },\n        hotColor: {\n            type: \"color\",\n            default: \"rgb(255, 193, 10)\",\n            description: \"Hot color (active)\",\n            isUIState: true\n        },\n        overloadColor: {\n            type: \"color\",\n            default: \"rgb(255, 10, 10)\",\n            description: \"Overload color (active)\",\n            isUIState: true\n        },\n        mode: {\n            type: \"enum\",\n            enums: [\"deciBel\", \"linear\"],\n            default: \"deciBel\",\n            description: \"Display mode\",\n            isUIState: true\n        },\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"Value output speed limit in ms\"\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"RMS window size\"\n        },\n        thresholdDB: {\n            type: \"number\",\n            default: 0.1,\n            description: \"Redraw Threshold in dB\"\n        },\n        thresholdLinear: {\n            type: \"number\",\n            default: 0.01,\n            description: \"Redraw Threshold in Linear\"\n        },\n        metering: {\n            type: \"enum\",\n            enums: [\"postFader\", \"preFader\"],\n            default: \"postFader\",\n            description: \"Display meter pre/post fader\"\n        },\n        interp: {\n            type: \"number\",\n            default: 0.01,\n            description: \"Ramp time\"\n        }\n    };\n    static UI = LiveGainUI;\n    _: LiveGainInternalState = {\n        ...this._,\n        analyserNode: undefined,\n        gainNode: this.audioCtx.createGain(),\n        bypassNode: this.audioCtx.createGain(),\n        $requestTimer: -1,\n        levels: []\n    };\n    inletAudioConnections = [{ node: this._.bypassNode, index: 0 }];\n    outletAudioConnections = [{ node: this._.gainNode, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        const validateAndUpdateUI = (value = 0, id?: string) => {\n            this.validateValue(value, id);\n            const paramValue = this.state.value === this.getProp(\"min\") ? 0 : this.getProp(\"mode\") === \"deciBel\" ? MathUtils.dbtoa(this.state.value) : this.state.value;\n            this.applyBPF(this._.gainNode.gain, [[paramValue, this.getProp(\"interp\")]]);\n            this.updateUI({ value: this.state.value });\n        }\n        const handleUpdateArgs = (args: number[]) => {\n            if (typeof args[0] === \"number\") {\n                validateAndUpdateUI(args[0]);\n            }\n        };\n        const startRequest = () => {\n            let lastResult: number[] = [];\n            const request = async () => {\n                if (this._.analyserNode && !this._.analyserNode.destroyed) {\n                    const absMax = await this._.analyserNode.getAbsMax();\n                    const mode = this.getProp(\"mode\");\n                    const thresh = this.getProp(mode === \"deciBel\" ? \"thresholdDB\" : \"thresholdLinear\");\n                    const result = mode === \"deciBel\" ? absMax.map(v => MathUtils.atodb(v)) : absMax;\n                    if (!lastResult.every((v, i) => v === result[i] || Math.abs(v - result[i]) < thresh) || lastResult.length !== result.length) {\n                        this.outlet(3, result);\n                        this._.levels = result;\n                        this.updateUI({ levels: result });\n                        lastResult = result;\n                    }\n                }\n                scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this._.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 4;\n        });\n        this.on(\"updateArgs\", handleUpdateArgs);\n        let lastMetering: \"preFader\" | \"postFader\";\n        let lastMode: \"deciBel\" | \"linear\";\n        this.on(\"updateProps\", async (props) => {\n            if (props.windowSize && this._.analyserNode) this.applyBPF(this._.analyserNode.parameters.get(\"windowSize\"), [[props.windowSize]]);\n            if (props.metering && lastMetering !== props.metering && this._.analyserNode) {\n                if (lastMetering) {\n                    if (lastMetering === \"postFader\") this._.gainNode.disconnect(this._.analyserNode);\n                    else this._.bypassNode.disconnect(this._.analyserNode);\n                }\n                lastMetering = props.metering;\n                if (props.metering === \"preFader\") this._.bypassNode.connect(this._.analyserNode, 0, 0);\n                else this._.gainNode.connect(this._.analyserNode, 0, 0);\n            }\n            if (props.mode && lastMode && lastMode !== props.mode) {\n                lastMode = props.mode;\n                let value: number;\n                if (props.mode === \"linear\") {\n                    value = MathUtils.dbtoa(this.state.value);\n                    await this.updateProps({ min: 0, max: 1.5, unitStyle: \"float\" });\n                } else {\n                    value = MathUtils.atodb(this.state.value);\n                    await this.updateProps({ min: -70, max: 6, unitStyle: \"decibel\" });\n                }\n                validateAndUpdateUI(value);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            lastMode = this.getProp(\"mode\");\n            validateAndUpdateUI(this.args[0] || 0);\n            this._.bypassNode.connect(this._.gainNode);\n            await TemporalAnalyserNode.register(this.audioCtx.audioWorklet);\n            this._.analyserNode = new TemporalAnalyserNode(this.audioCtx);\n            this.applyBPF(this._.analyserNode.parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            if (this.getProp(\"metering\") === \"preFader\") this._.bypassNode.connect(this._.analyserNode, 0, 0);\n            else this._.gainNode.connect(this._.analyserNode, 0, 0);\n            startRequest();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    validateAndUpdateUI(+data);\n                }\n                this.outletAll([, this.state.value, this._.displayValue]);\n            }\n        });\n        this.on(\"changeFromUI\", ({ value }) => {\n            this.validateValue(value);\n            const paramValue = this.state.value === this.getProp(\"min\") ? 0 : this.getProp(\"mode\") === \"deciBel\" ? MathUtils.dbtoa(this.state.value) : this.state.value;\n            this.applyBPF(this._.gainNode.gain, [[paramValue, this.getProp(\"interp\")]]);\n            this.outletAll([, this.state.value, this._.displayValue]);\n        });\n        this.on(\"destroy\", async () => {\n            this._.bypassNode.disconnect();\n            this._.gainNode.disconnect();\n            window.clearTimeout(this._.$requestTimer);\n            if (this._.analyserNode) await this._.analyserNode.destroy();\n        });\n        this.on(\"updateState\", ({ state: { value }, id }) => {\n            validateAndUpdateUI(value, id);\n            this.outletAll([, this.state.value, this._.displayValue]);\n        });\n    }\n}\n","\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { BaseObject, MathUtils, TemporalAnalyserNode } from \"../sdk\";\nimport LiveMeterUI, { LiveMeterUIState } from \"../ui/meter\";\nimport LiveObject from \"./base\";\n\nexport interface LiveMeterProps {\n    active: boolean;\n    orientation: \"vertical\" | \"horizontal\";\n    mode: \"deciBel\" | \"linear\";\n    min: number;\n    max: number;\n    thresholdLinear: number;\n    thresholdDB: number;\n    speedLim: number;\n    frameRate: number;\n    windowSize: number;\n    bgColor: string;\n    inactiveColdColor: string;\n    inactiveWarmColor: string;\n    coldColor: string;\n    warmColor: string;\n    hotColor: string;\n    overloadColor: string;\n}\nexport interface LiveMeterInternalState {\n    node: TemporalAnalyserNode;\n    $requestTimer: number;\n    levels: number[];\n}\n\nexport default class LiveMeter extends BaseObject<{}, {}, [], [number[]], [], LiveMeterProps, LiveMeterUIState> {\n    static package = LiveObject.package;\n    static author = LiveObject.author;\n    static version = LiveObject.version;\n    static description = \"Meter\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal to measure\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Amplitude value: number[]\"\n    }];\n    static props: IPropsMeta<LiveMeterProps> = {\n        min: {\n            type: \"number\",\n            default: -70,\n            description: \"Minimum value (dB)\",\n            isUIState: true\n        },\n        max: {\n            type: \"number\",\n            default: 6,\n            description: \"Maximum value (dB)\",\n            isUIState: true\n        },\n        active: {\n            type: \"boolean\",\n            default: true,\n            description: \"Active _\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        inactiveColdColor: {\n            type: \"color\",\n            default: \"rgb(130, 130, 130)\",\n            description: \"Cold color (inactive)\",\n            isUIState: true\n        },\n        inactiveWarmColor: {\n            type: \"color\",\n            default: \"rgb(149, 149, 149)\",\n            description: \"Warm color (inactive)\",\n            isUIState: true\n        },\n        coldColor: {\n            type: \"color\",\n            default: \"rgb(12, 248, 100)\",\n            description: \"Cold color (active)\",\n            isUIState: true\n        },\n        warmColor: {\n            type: \"color\",\n            default: \"rgb(195, 248, 100)\",\n            description: \"Warm color (active)\",\n            isUIState: true\n        },\n        hotColor: {\n            type: \"color\",\n            default: \"rgb(255, 193, 10)\",\n            description: \"Hot color (active)\",\n            isUIState: true\n        },\n        overloadColor: {\n            type: \"color\",\n            default: \"rgb(255, 10, 10)\",\n            description: \"Overload color (active)\",\n            isUIState: true\n        },\n        orientation: {\n            type: \"enum\",\n            enums: [\"vertical\", \"horizontal\"],\n            default: \"horizontal\",\n            description: \"Meter orientation\",\n            isUIState: true\n        },\n        mode: {\n            type: \"enum\",\n            enums: [\"deciBel\", \"linear\"],\n            default: \"deciBel\",\n            description: \"Display mode\",\n            isUIState: true\n        },\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"Value output speed limit in ms\"\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"RMS window size\"\n        },\n        thresholdDB: {\n            type: \"number\",\n            default: 0.1,\n            description: \"Redraw Threshold in dB\"\n        },\n        thresholdLinear: {\n            type: \"number\",\n            default: 0.01,\n            description: \"Redraw Threshold in Linear\"\n        }\n    };\n    static UI = LiveMeterUI;\n    _: LiveMeterInternalState = { node: undefined, $requestTimer: -1, levels: [] };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            let lastResult: number[] = [];\n            const request = async () => {\n                if (this._.node && !this._.node.destroyed) {\n                    const absMax = await this._.node.getAbsMax();\n                    const mode = this.getProp(\"mode\");\n                    const thresh = this.getProp(mode === \"deciBel\" ? \"thresholdDB\" : \"thresholdLinear\");\n                    const result = mode === \"deciBel\" ? absMax.map(v => MathUtils.atodb(v)) : absMax;\n                    if (!lastResult.every((v, i) => v === result[i] || Math.abs(v - result[i]) < thresh) || lastResult.length !== result.length) {\n                        this.outlet(0, result);\n                        this._.levels = result;\n                        this.updateUI({ levels: result });\n                        lastResult = result;\n                    }\n                }\n                scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this._.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (props.windowSize && this._.node) this.applyBPF(this._.node.parameters.get(\"windowSize\"), [[props.windowSize]]);\n        });\n        this.on(\"postInit\", async () => {\n            await TemporalAnalyserNode.register(this.audioCtx.audioWorklet);\n            this._.node = new TemporalAnalyserNode(this.audioCtx);\n            this.applyBPF(this._.node.parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\n            this.connectAudioInlet();\n            startRequest();\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this._.$requestTimer);\n            if (this._.node) this._.node.destroy();\n        });\n    }\n}\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Bang, isBang } from \"../sdk\";\nimport LiveNumboxUI, { LiveNumboxUIState } from \"../ui/numbox\";\nimport LiveObject, { LiveObjectProps } from \"./base\";\n\nexport interface LiveNumboxProps extends LiveObjectProps {\n    bgColor: string;\n    activeBgColor: string;\n    borderColor: string;\n    focusBorderColor: string;\n    textColor: string;\n    fontFamily: string;\n    fontSize: number;\n    fontFace: \"regular\" | \"bold\" | \"italic\" | \"bold italic\";\n    appearance: \"slider\" | \"triangle\" | \"default\";\n    triColor: string;\n    activeTriColor: string;\n    triColor2: string;\n    activeTriColor2: string;\n    activeSliderColor: string;\n}\nexport default class LiveNumbox extends LiveObject<{}, {}, [number | Bang, number], [number, string], [number], LiveNumboxProps, LiveNumboxUIState> {\n    static description = \"Number box\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"number\",\n        description: \"Set and output the value\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"Set without output the value\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Number value\"\n    }, {\n        type: \"string\",\n        description: \"Display value\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 0,\n        description: \"Initial value\"\n    }];\n    static props: IPropsMeta<Partial<LiveNumboxProps>> = {\n        bgColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Background color (inactive)\",\n            isUIState: true\n        },\n        activeBgColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Background color (active)\",\n            isUIState: true\n        },\n        borderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (unfocus)\",\n            isUIState: true\n        },\n        focusBorderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (focus)\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"rgba(0, 0, 0, 1)\",\n            description: \"Text color\",\n            isUIState: true\n        },\n        fontFamily: {\n            type: \"enum\",\n            enums: [\"Lato\", \"Georgia\", \"Times New Roman\", \"Arial\", \"Tahoma\", \"Verdana\", \"Courier New\"],\n            default: \"Arial\",\n            description: \"Font family\",\n            isUIState: true\n        },\n        fontSize: {\n            type: \"number\",\n            default: 10,\n            description: \"Text font size\",\n            isUIState: true\n        },\n        fontFace: {\n            type: \"enum\",\n            enums: [\"regular\", \"bold\", \"italic\", \"bold italic\"],\n            default: \"regular\",\n            description: \"Text style\",\n            isUIState: true\n        },\n        appearance: {\n            type: \"enum\",\n            enums: [\"default\", \"slider\", \"triangle\"],\n            default: \"default\",\n            description: \"Text style\",\n            isUIState: true\n        },\n        triColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Triangle color (inactive)\",\n            isUIState: true\n        },\n        activeTriColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Triangle color (active)\",\n            isUIState: true\n        },\n        triColor2: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Triangle color on positive value (inactive)\",\n            isUIState: true\n        },\n        activeTriColor2: {\n            type: \"color\",\n            default: \"rgba(109, 215, 255, 1)\",\n            description: \"Triangle color on positive value (active)\",\n            isUIState: true\n        },\n        activeSliderColor: {\n            type: \"color\",\n            default: \"rgba(109, 215, 255, 1)\",\n            description: \"Slider color\",\n            isUIState: true\n        }\n    };\n    static UI = LiveNumboxUI;\n    subscribe() {\n        super.subscribe();\n        const validateAndUpdateUI = (value = 0, id?: string) => {\n            this.validateValue(value, id);\n            this.updateUI({ value: this.state.value });\n        }\n        const handleUpdateArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                validateAndUpdateUI(args[0]);\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            validateAndUpdateUI(this.args[0] || 0);\n        });\n        this.on(\"updateArgs\", handleUpdateArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    validateAndUpdateUI(+data);\n                }\n                this.outletAll([this.state.value, this._.displayValue]);\n            } else if (inlet === 1) {\n                validateAndUpdateUI(+data);\n            }\n        });\n        this.on(\"changeFromUI\", ({ value }) => {\n            this.validateValue(value);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n        this.on(\"updateState\", ({ state: { value }, id }) => {\n            validateAndUpdateUI(value, id);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n    }\n}\n","\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Bang, isBang } from \"../sdk\";\nimport LiveSliderUI, { LiveSliderUIState } from \"../ui/slider\";\nimport LiveObject, { LiveObjectProps } from \"./base\";\n\nexport interface LiveSliderProps extends LiveObjectProps {\n    relative: boolean;\n    sliderColor: string;\n    triBorderColor: string;\n    triColor: string;\n    triOnColor: string;\n    textColor: string;\n    fontFamily: string;\n    fontSize: number;\n    fontFace: \"regular\" | \"bold\" | \"italic\" | \"bold italic\";\n    orientation: \"vertical\" | \"horizontal\";\n    showName: boolean;\n    showNumber: boolean;\n}\nexport default class LiveSlider extends LiveObject<{}, {}, [number | Bang, number], [number, string], [number], LiveSliderProps, LiveSliderUIState> {\n    static description = \"Slider\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"number\",\n        description: \"Set and output the value\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"Set without output the value\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Number value\"\n    }, {\n        type: \"string\",\n        description: \"Display value\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 0,\n        description: \"Initial value\"\n    }];\n    static props: IPropsMeta<Partial<LiveSliderProps>> = {\n        shortName: {\n            type: \"string\",\n            default: \"live.slider\",\n            description: \"Short name to display\",\n            isUIState: true\n        },\n        longName: {\n            type: \"string\",\n            default: \"live.slider\",\n            description: \"Long name to display\",\n            isUIState: true\n        },\n        relative: {\n            type: \"boolean\",\n            default: false,\n            description: \"Modify value use relative mouse move\",\n            isUIState: true\n        },\n        sliderColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Slider color\",\n            isUIState: true\n        },\n        triBorderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Triangle border color\",\n            isUIState: true\n        },\n        triColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Triangle color\",\n            isUIState: true\n        },\n        triOnColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Triangle color while on\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"rgba(255, 255, 255, 1)\",\n            description: \"Text color\",\n            isUIState: true\n        },\n        fontFamily: {\n            type: \"enum\",\n            enums: [\"Lato\", \"Georgia\", \"Times New Roman\", \"Arial\", \"Tahoma\", \"Verdana\", \"Courier New\"],\n            default: \"Arial\",\n            description: \"Font family\",\n            isUIState: true\n        },\n        fontSize: {\n            type: \"number\",\n            default: 10,\n            description: \"Text font size\",\n            isUIState: true\n        },\n        fontFace: {\n            type: \"enum\",\n            enums: [\"regular\", \"bold\", \"italic\", \"bold italic\"],\n            default: \"regular\",\n            description: \"Text style\",\n            isUIState: true\n        },\n        orientation: {\n            type: \"enum\",\n            enums: [\"vertical\", \"horizontal\"],\n            default: \"horizontal\",\n            description: \"Slider orientation\",\n            isUIState: true\n        },\n        showName: {\n            type: \"boolean\",\n            default: true,\n            description: \"Display name\",\n            isUIState: true\n        },\n        showNumber: {\n            type: \"boolean\",\n            default: true,\n            description: \"Display number as text\",\n            isUIState: true\n        }\n    };\n    static UI = LiveSliderUI;\n    subscribe() {\n        super.subscribe();\n        const validateAndUpdateUI = (value = 0, id?: string) => {\n            this.validateValue(value, id);\n            this.updateUI({ value: this.state.value });\n        }\n        const handleUpdateArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                validateAndUpdateUI(+!!args[0]);\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            validateAndUpdateUI(this.args[0] || 0);\n        });\n        this.on(\"updateArgs\", handleUpdateArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    validateAndUpdateUI(+data);\n                }\n                this.outletAll([this.state.value, this._.displayValue]);\n            } else if (inlet === 1) {\n                validateAndUpdateUI(+data);\n            }\n        });\n        this.on(\"changeFromUI\", ({ value }) => {\n            this.validateValue(value);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n        this.on(\"updateState\", ({ state: { value }, id }) => {\n            validateAndUpdateUI(value, id);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n    }\n}\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Bang, isBang } from \"../sdk\";\nimport LiveTabUI, { LiveTabUIState } from \"../ui/tab\";\nimport LiveObject, { LiveObjectProps } from \"./base\";\n\nexport interface LiveTabProps extends LiveObjectProps {\n    bgColor: string;\n    bgOnColor: string;\n    activeBgColor: string;\n    activeBgOnColor: string;\n    borderColor: string;\n    focusBorderColor: string;\n    textColor: string;\n    textOnColor: string;\n    activeTextColor: string;\n    activeTextOnColor: string;\n    fontFamily: string;\n    fontSize: number;\n    fontFace: \"regular\" | \"bold\" | \"italic\" | \"bold italic\";\n    mode: \"equal\" | \"proportional\";\n    spacingX: number;\n    spacingY: number;\n    multiline: boolean;\n}\nexport default class LiveTab extends LiveObject<{}, {}, [number | Bang, number], [number, string], [number], LiveTabProps, LiveTabUIState> {\n    static description = \"Buttons as tab\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"number\",\n        description: \"Set and output the value\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"Set without output the value\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Number value\"\n    }, {\n        type: \"string\",\n        description: \"Display value\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 0,\n        description: \"Initial value\"\n    }];\n    static props: IPropsMeta<Partial<LiveTabProps>> = {\n        bgColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Background color (inactive / off)\",\n            isUIState: true\n        },\n        activeBgColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Background color (active / off)\",\n            isUIState: true\n        },\n        bgOnColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Background color (inactive / on)\",\n            isUIState: true\n        },\n        activeBgOnColor: {\n            type: \"color\",\n            default: \"rgba(255, 181, 50, 1)\",\n            description: \"Background color (active / on)\",\n            isUIState: true\n        },\n        borderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (unfocus)\",\n            isUIState: true\n        },\n        focusBorderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (focus)\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"rgba(90, 90, 90, 1)\",\n            description: \"Text color (inactive / off)\",\n            isUIState: true\n        },\n        textOnColor: {\n            type: \"color\",\n            default: \"rgba(90, 90, 90, 1)\",\n            description: \"Text color (inactive / on)\",\n            isUIState: true\n        },\n        activeTextColor: {\n            type: \"color\",\n            default: \"rgba(0, 0, 0, 1)\",\n            description: \"Text color (active / off)\",\n            isUIState: true\n        },\n        activeTextOnColor: {\n            type: \"color\",\n            default: \"rgba(0, 0, 0, 1)\",\n            description: \"Text color (active / on)\",\n            isUIState: true\n        },\n        fontFamily: {\n            type: \"enum\",\n            enums: [\"Lato\", \"Georgia\", \"Times New Roman\", \"Arial\", \"Tahoma\", \"Verdana\", \"Courier New\"],\n            default: \"Arial\",\n            description: \"Font family\",\n            isUIState: true\n        },\n        fontSize: {\n            type: \"number\",\n            default: 10,\n            description: \"Text font size\",\n            isUIState: true\n        },\n        fontFace: {\n            type: \"enum\",\n            enums: [\"regular\", \"bold\", \"italic\", \"bold italic\"],\n            default: \"regular\",\n            description: \"Text style\",\n            isUIState: true\n        },\n        mode: {\n            type: \"enum\",\n            enums: [\"equal\", \"proportional\"],\n            default: \"equal\",\n            description: \"Spacing mode\",\n            isUIState: true\n        },\n        spacingX: {\n            type: \"number\",\n            default: 6,\n            description: \"Tab horizontal spacing\",\n            isUIState: true\n        },\n        spacingY: {\n            type: \"number\",\n            default: 6,\n            description: \"Tab vertical spacing\",\n            isUIState: true\n        },\n        multiline: {\n            type: \"boolean\",\n            default: true,\n            description: \"Multi-line tabs\",\n            isUIState: true\n        },\n        enums: {\n            type: \"object\",\n            default: [\"one\", \"two\", \"three\"],\n            description: \"Enum values\",\n            isUIState: true\n        }\n    };\n    static UI = LiveTabUI;\n    subscribe() {\n        super.subscribe();\n        const validateAndUpdateUI = (value = 0, id?: string) => {\n            this.validateValue(value, id);\n            this.updateUI({ value: this.state.value });\n        }\n        const handleUpdateArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                validateAndUpdateUI(args[0]);\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            validateAndUpdateUI(this.args[0] || 0);\n        });\n        this.on(\"updateArgs\", handleUpdateArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    validateAndUpdateUI(+data);\n                }\n                this.outletAll([this.state.value, this._.displayValue]);\n            } else if (inlet === 1) {\n                validateAndUpdateUI(+data);\n            }\n        });\n        this.on(\"changeFromUI\", ({ value }) => {\n            this.validateValue(value);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n        this.on(\"updateState\", ({ state: { value }, id }) => {\n            validateAndUpdateUI(value, id);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n    }\n}\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Bang, isBang } from \"../sdk\";\nimport LiveTextUI, { LiveTextUIState } from \"../ui/text\";\nimport LiveObject, { LiveObjectProps } from \"./base\";\n\nexport interface LiveTextProps extends LiveObjectProps {\n    bgColor: string;\n    bgOnColor: string;\n    activeBgColor: string;\n    activeBgOnColor: string;\n    borderColor: string;\n    focusBorderColor: string;\n    textColor: string;\n    textOnColor: string;\n    activeTextColor: string;\n    activeTextOnColor: string;\n    fontFamily: string;\n    fontSize: number;\n    fontFace: \"regular\" | \"bold\" | \"italic\" | \"bold italic\";\n    mode: \"button\" | \"toggle\";\n    text: string;\n    textOn: string;\n}\nexport default class LiveText extends LiveObject<{}, {}, [number | Bang, number], [number, string], [number], LiveTextProps, LiveTextUIState> {\n    static description = \"Button or toggle with text\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"number\",\n        description: \"Set and output the value\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"Set without output the value\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Number value\"\n    }, {\n        type: \"string\",\n        description: \"Display value\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 0,\n        description: \"Initial value\"\n    }];\n    static props: IPropsMeta<Partial<LiveTextProps>> = {\n        bgColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Background color (inactive / off)\",\n            isUIState: true\n        },\n        activeBgColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Background color (active / off)\",\n            isUIState: true\n        },\n        bgOnColor: {\n            type: \"color\",\n            default: \"rgba(165, 165, 165, 1)\",\n            description: \"Background color (inactive / on)\",\n            isUIState: true\n        },\n        activeBgOnColor: {\n            type: \"color\",\n            default: \"rgba(255, 181, 50, 1)\",\n            description: \"Background color (active / on)\",\n            isUIState: true\n        },\n        borderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (unfocus)\",\n            isUIState: true\n        },\n        focusBorderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (focus)\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"rgba(90, 90, 90, 1)\",\n            description: \"Text color (inactive / off)\",\n            isUIState: true\n        },\n        textOnColor: {\n            type: \"color\",\n            default: \"rgba(90, 90, 90, 1)\",\n            description: \"Text color (inactive / on)\",\n            isUIState: true\n        },\n        activeTextColor: {\n            type: \"color\",\n            default: \"rgba(0, 0, 0, 1)\",\n            description: \"Text color (active / off)\",\n            isUIState: true\n        },\n        activeTextOnColor: {\n            type: \"color\",\n            default: \"rgba(0, 0, 0, 1)\",\n            description: \"Text color (active / on)\",\n            isUIState: true\n        },\n        fontFamily: {\n            type: \"enum\",\n            enums: [\"Lato\", \"Georgia\", \"Times New Roman\", \"Arial\", \"Tahoma\", \"Verdana\", \"Courier New\"],\n            default: \"Arial\",\n            description: \"Font family\",\n            isUIState: true\n        },\n        fontSize: {\n            type: \"number\",\n            default: 10,\n            description: \"Text font size\",\n            isUIState: true\n        },\n        fontFace: {\n            type: \"enum\",\n            enums: [\"regular\", \"bold\", \"italic\", \"bold italic\"],\n            default: \"regular\",\n            description: \"Text style\",\n            isUIState: true\n        },\n        mode: {\n            type: \"enum\",\n            enums: [\"button\", \"toggle\"],\n            default: \"toggle\",\n            description: \"Trigger mode\",\n            isUIState: true\n        },\n        text: {\n            type: \"string\",\n            default: \"A\",\n            description: \"Text (off)\",\n            isUIState: true\n        },\n        textOn: {\n            type: \"string\",\n            default: \"B\",\n            description: \"Text (off)\",\n            isUIState: true\n        }\n    };\n    static UI = LiveTextUI;\n    subscribe() {\n        super.subscribe();\n        const validateAndUpdateUI = (value = 0, id?: string) => {\n            this.validateValue(value, id);\n            this.updateUI({ value: this.state.value });\n        }\n        const handleUpdateArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                validateAndUpdateUI(args[0]);\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            validateAndUpdateUI(this.args[0] || 0);\n        });\n        this.on(\"updateArgs\", handleUpdateArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    validateAndUpdateUI(+data);\n                }\n                this.outletAll([this.state.value, this._.displayValue]);\n            } else if (inlet === 1) {\n                validateAndUpdateUI(+data);\n            }\n        });\n        this.on(\"changeFromUI\", ({ value }) => {\n            this.validateValue(value);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n        this.on(\"updateState\", ({ state: { value }, id }) => {\n            validateAndUpdateUI(value, id);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n    }\n}\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Bang, isBang } from \"../sdk\";\nimport LiveToggleUI, { LiveToggleUIState } from \"../ui/toggle\";\nimport LiveObject, { LiveObjectProps } from \"./base\";\n\nexport interface LiveToggleProps extends LiveObjectProps {\n    bgColor: string;\n    activeBgColor: string;\n    bgOnColor: string;\n    activeBgOnColor: string;\n    borderColor: string;\n    focusBorderColor: string;\n}\n\nexport default class LiveToggle extends LiveObject<{}, {}, [number | Bang, number], [number, string], [number], LiveToggleProps, LiveToggleUIState> {\n    static description = \"Toggle\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"number\",\n        description: \"Set and output the value\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"Set without output the value\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Number value\"\n    }, {\n        type: \"string\",\n        description: \"Display value\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 0,\n        description: \"Initial value\"\n    }];\n    static props: IPropsMeta = {\n        max: {\n            type: \"number\",\n            default: 1,\n            description: \"Maximum value\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgba(90, 90, 90, 1)\",\n            description: \"Background color (inactive)\",\n            isUIState: true\n        },\n        activeBgColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Background color (active)\",\n            isUIState: true\n        },\n        bgOnColor: {\n            type: \"color\",\n            default: \"rgba(195, 195, 195, 1)\",\n            description: \"Background color (on / inactive)\",\n            isUIState: true\n        },\n        activeBgOnColor: {\n            type: \"color\",\n            default: \"rgba(109, 215, 255, 1)\",\n            description: \"Background color (on / active)\",\n            isUIState: true\n        },\n        borderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (unfocus)\",\n            isUIState: true\n        },\n        focusBorderColor: {\n            type: \"color\",\n            default: \"rgba(80, 80, 80, 1)\",\n            description: \"Border color (focus)\",\n            isUIState: true\n        }\n    };\n    static UI = LiveToggleUI;\n    subscribe() {\n        super.subscribe();\n        const validateAndUpdateUI = (value = 0, id?: string) => {\n            this.validateValue(value, id);\n            this.updateUI({ value: this.state.value });\n        }\n        const handleUpdateArgs = (args: [number?]) => {\n            if (typeof args[0] === \"number\") {\n                validateAndUpdateUI(args[0]);\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            validateAndUpdateUI(this.args[0] || 0);\n        });\n        this.on(\"updateArgs\", handleUpdateArgs);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    validateAndUpdateUI(+data);\n                }\n                this.outletAll([this.state.value, this._.displayValue]);\n            } else if (inlet === 1) {\n                validateAndUpdateUI(+data);\n            }\n        });\n        this.on(\"changeFromUI\", ({ value }) => {\n            this.validateValue(value);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n        this.on(\"updateState\", ({ state: { value }, id }) => {\n            validateAndUpdateUI(value, id);\n            this.outletAll([this.state.value, this._.displayValue]);\n        });\n    }\n}\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    ReactDOM,\r\n    SemanticUI,\r\n    PatcherAudio,\r\n    OperableAudioBuffer,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    DefaultObject,\r\n    BaseUI,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    CodeUI,\r\n    DefaultPopupUI,\r\n    CodePopupUI,\r\n    DOMUI,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    generateRemotedObject,\r\n    Bang,\r\n    isBang,\r\n    TransmitterNode,\r\n    TemporalAnalyserNode,\r\n    SpectralAnalyserNode,\r\n    MathUtils,\r\n    BufferUtils,\r\n    Utils,\r\n    getReactMonacoEditor\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface OperableAudioBuffer extends InstanceType<typeof OperableAudioBuffer> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface TransmitterNode extends InstanceType<typeof TransmitterNode> {}\r\nexport interface TemporalAnalyserNode extends InstanceType<typeof TemporalAnalyserNode> {}\r\nexport interface SpectralAnalyserNode extends InstanceType<typeof SpectralAnalyserNode> {}\r\n","import type { BaseUIState } from \"@jspatcher/jspatcher/src/core/objects/base/BaseUI\";\r\nimport { React, BaseUI, CanvasUI, MathUtils } from \"../sdk\";\r\nimport type LiveObject from \"../objects/base\";\r\n\r\nexport interface PointerDownEvent {\r\n    x: number;\r\n    y: number;\r\n    originalEvent: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent;\r\n}\r\n\r\nexport interface PointerDragEvent {\r\n    prevValue: number;\r\n    x: number;\r\n    y: number;\r\n    fromX: number;\r\n    fromY: number;\r\n    movementX: number;\r\n    movementY: number;\r\n    originalEvent: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent;\r\n}\r\n\r\nexport interface PointerUpEvent {\r\n    x: number;\r\n    y: number;\r\n    originalEvent: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent;\r\n}\r\n\r\nexport interface LiveObjectUIProps {\r\n    value: number;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    type: \"float\" | \"int\" | \"enum\";\r\n    enums: string[];\r\n    active: boolean;\r\n    focus: boolean;\r\n    shortName: string;\r\n    longName: string;\r\n    unitStyle: \"int\" | \"float\" | \"time\" | \"hertz\" | \"decibel\" | \"%\" | \"pan\" | \"semitones\" | \"midi\" | \"custom\" | \"native\";\r\n    units: string;\r\n    exponent: number;\r\n    speedLim: number;\r\n    frameRate: number;\r\n}\r\nexport interface LiveObjectUIState extends LiveObjectUIProps {}\r\n\r\nexport const getDisplayValue = (value: number, type: string, unitstyle: string, units: string, enums: string[]) => {\r\n    if (type === \"enum\") return enums[value];\r\n    if (unitstyle === \"int\") return value.toFixed(0);\r\n    if (unitstyle === \"float\") return value.toFixed(2);\r\n    if (unitstyle === \"time\") return value.toFixed(type === \"int\" ? 0 : 2) + \" ms\";\r\n    if (unitstyle === \"hertz\") return value.toFixed(type === \"int\" ? 0 : 2) + \" Hz\";\r\n    if (unitstyle === \"decibel\") return value.toFixed(type === \"int\" ? 0 : 2) + \" dB\";\r\n    if (unitstyle === \"%\") return value.toFixed(type === \"int\" ? 0 : 2) + \" %\";\r\n    if (unitstyle === \"pan\") return value === 0 ? \"C\" : (type === \"int\" ? Math.abs(value) : Math.abs(value).toFixed(2)) + (value < 0 ? \" L\" : \" R\");\r\n    if (unitstyle === \"semitones\") return value.toFixed(type === \"int\" ? 0 : 2) + \" st\";\r\n    if (unitstyle === \"midi\") return MathUtils.toMIDI(value);\r\n    if (unitstyle === \"custom\") return value.toFixed(type === \"int\" ? 0 : 2) + \" \" + units;\r\n    if (unitstyle === \"native\") return value.toFixed(type === \"int\" ? 0 : 2);\r\n    return \"N/A\";\r\n};\r\nexport default class LiveObjectUI<T extends LiveObject, S extends Partial<LiveObjectUIState> & Record<string, any> = {}> extends CanvasUI<T, {}, S & LiveObjectUIState & BaseUIState> {\r\n    className: string;\r\n    $changeTimer = -1;\r\n    state: S & LiveObjectUIState & BaseUIState = {\r\n        ...this.state,\r\n        value: this.object.state.value\r\n    };\r\n    handleKeyDown = (e: React.KeyboardEvent) => {};\r\n    handleKeyUp = (e: React.KeyboardEvent) => {};\r\n    private handleTouchStart = (e: React.TouchEvent) => {\r\n        this.canvas.focus();\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        let prevX = e.touches[0].clientX;\r\n        let prevY = e.touches[0].clientY;\r\n        const fromX = prevX - rect.left;\r\n        const fromY = prevY - rect.top;\r\n        const prevValue = this.state.value;\r\n        this.handlePointerDown({ x: fromX, y: fromY, originalEvent: e });\r\n        const handleTouchMove = (e: TouchEvent) => {\r\n            e.preventDefault();\r\n            const clientX = e.changedTouches[0].clientX;\r\n            const clientY = e.changedTouches[0].clientY;\r\n            const movementX = clientX - prevX;\r\n            const movementY = clientY - prevY;\r\n            prevX = clientX;\r\n            prevY = clientY;\r\n            const x = clientX - rect.left;\r\n            const y = clientY - rect.top;\r\n            this.handlePointerDrag({ prevValue, x, y, fromX, fromY, movementX, movementY, originalEvent: e });\r\n        };\r\n        const handleTouchEnd = (e: TouchEvent) => {\r\n            e.preventDefault();\r\n            const x = e.changedTouches[0].clientX - rect.left;\r\n            const y = e.changedTouches[0].clientY - rect.top;\r\n            this.handlePointerUp({ x, y, originalEvent: e });\r\n            document.removeEventListener(\"touchmove\", handleTouchMove);\r\n            document.removeEventListener(\"touchend\", handleTouchEnd);\r\n        };\r\n        document.addEventListener(\"touchmove\", handleTouchMove, { passive: false });\r\n        document.addEventListener(\"touchend\", handleTouchEnd, { passive: false });\r\n    };\r\n    handleWheel = (e: React.WheelEvent) => {};\r\n    handleClick = (e: React.MouseEvent) => {};\r\n    private handleMouseDown = (e: React.MouseEvent) => {\r\n        e.preventDefault();\r\n        this.canvas.focus();\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        const fromX = e.clientX - rect.left;\r\n        const fromY = e.clientY - rect.top;\r\n        const prevValue = this.state.value;\r\n        this.handlePointerDown({ x: fromX, y: fromY, originalEvent: e });\r\n        const handleMouseMove = (e: MouseEvent) => {\r\n            e.preventDefault();\r\n            const x = e.clientX - rect.left;\r\n            const y = e.clientY - rect.top;\r\n            this.handlePointerDrag({ prevValue, x, y, fromX, fromY, movementX: e.movementX, movementY: e.movementY, originalEvent: e });\r\n        };\r\n        const handleMouseUp = (e: MouseEvent) => {\r\n            e.preventDefault();\r\n            const x = e.clientX - rect.left;\r\n            const y = e.clientY - rect.top;\r\n            this.handlePointerUp({ x, y, originalEvent: e });\r\n            document.removeEventListener(\"mousemove\", handleMouseMove);\r\n            document.removeEventListener(\"mouseup\", handleMouseUp);\r\n        };\r\n        document.addEventListener(\"mousemove\", handleMouseMove);\r\n        document.addEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n    handleMouseOver = (e: React.MouseEvent) => {};\r\n    handleMouseOut = (e: React.MouseEvent) => {};\r\n    handleContextMenu = (e: React.MouseEvent) => {};\r\n    handlePointerDown = (e: PointerDownEvent) => {};\r\n    handlePointerDrag = (e: PointerDragEvent) => {};\r\n    handlePointerUp = (e: PointerUpEvent) => {};\r\n    handleFocusIn = (e: React.FocusEvent) => this.setState({ focus: true });\r\n    handleFocusOut = (e: React.FocusEvent) => this.setState({ focus: false });\r\n    /**\r\n     * Normalized value between 0 - 1.\r\n     */\r\n    get distance() {\r\n        return LiveObjectUI.getDistance(this.state);\r\n    }\r\n    static getDistance(state: { type: \"enum\" | \"int\" | \"float\"; value: number; min: number; max: number; exponent: number; enums?: string[] }) {\r\n        const { type, max, min, value, exponent, enums } = state;\r\n        const normalized = type === \"enum\" ? Math.max(0, Math.min(enums.length - 1, value)) / (enums.length - 1) : (Math.max(min, Math.min(max, value)) - min) / (max - min);\r\n        return MathUtils.iNormExp(normalized || 0, exponent);\r\n    }\r\n    /**\r\n     * Count steps in range min-max with step\r\n     */\r\n    get stepsCount() {\r\n        const { type, max, min, step, enums } = this.state;\r\n        if (type === \"enum\") return enums.length - 1;\r\n        if (type === \"float\") return Math.min(Number.MAX_SAFE_INTEGER, Math.floor((max - min) / step));\r\n        return Math.min(Math.floor((max - min) / (Math.round(step) || 1)), max - min);\r\n    }\r\n    get displayValue() {\r\n        const { value, type, unitStyle, units, enums } = this.state;\r\n        return getDisplayValue(value, type, unitStyle, units, enums);\r\n    }\r\n    setValueToOutput(value: number) {\r\n        this.setState({ value });\r\n        this.scheduleChangeHandler();\r\n    }\r\n    changeCallback = () => {\r\n        this.props.object.onChangeFromUI({ value: this.state.value, displayValue: this.displayValue });\r\n        this.$changeTimer = -1;\r\n    };\r\n    scheduleChangeHandler() {\r\n        if (this.$changeTimer === -1) this.$changeTimer = window.setTimeout(this.changeCallback, this.state.speedLim);\r\n    }\r\n    paint() {}\r\n    render() {\r\n        return (\r\n            <BaseUI {...this.props}>\r\n                <canvas\r\n                    ref={this.refCanvas}\r\n                    className={[\"live-component\", this.className].join(\" \")}\r\n                    style={{ position: \"absolute\", display: \"inline-block\", width: \"100%\", height: \"100%\" }}\r\n                    tabIndex={1}\r\n                    onKeyDown={this.handleKeyDown}\r\n                    onKeyUp={this.handleKeyUp}\r\n                    onTouchStart={this.handleTouchStart}\r\n                    onWheel={this.handleWheel}\r\n                    onClick={this.handleClick}\r\n                    onMouseDown={this.handleMouseDown}\r\n                    onMouseOver={this.handleMouseOver}\r\n                    onMouseOut={this.handleMouseOut}\r\n                    onContextMenu={this.handleContextMenu}\r\n                    onFocus={this.handleFocusIn}\r\n                    onBlur={this.handleFocusOut}\r\n                    {...this.props.canvasProps}\r\n                />\r\n            </BaseUI>\r\n        );\r\n    }\r\n}","import LiveObjectUI, { LiveObjectUIState } from \"./base\";\r\nimport type LiveButton from \"../objects/button\";\r\nimport type { LiveButtonProps } from \"../objects/button\";\r\n\r\nexport interface LiveButtonUIState extends Omit<Required<LiveButtonProps>, \"transition\">, LiveObjectUIState {}\r\n\r\nexport default class LiveButtonUI extends LiveObjectUI<LiveButton, LiveButtonUIState> {\r\n    static defaultSize: [number, number] = [30, 30];\r\n    className = \"live-button\";\r\n    inTouch = false;\r\n    $resetTimer = -1;\r\n    resetCallback = () => {\r\n        this.setValueToOutput(0);\r\n        this.$resetTimer = -1;\r\n    };\r\n    paint() {\r\n        if (this.$resetTimer !== -1) {\r\n            window.clearTimeout(this.$resetTimer);\r\n            this.resetCallback();\r\n        }\r\n        const {\r\n            // width,\r\n            // height,\r\n            active,\r\n            focus,\r\n            bgColor,\r\n            activeBgColor,\r\n            bgOnColor,\r\n            activeBgOnColor,\r\n            borderColor,\r\n            focusBorderColor,\r\n            value\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const borderWidth = 1;\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        ctx.lineWidth = borderWidth;\r\n        const buttonBgColor = active ? (value ? activeBgOnColor : activeBgColor) : (value ? bgOnColor : bgColor);\r\n        const buttonBorderColor = focus ? focusBorderColor : borderColor;\r\n\r\n        ctx.fillStyle = buttonBgColor;\r\n        ctx.beginPath();\r\n        ctx.ellipse(width * 0.5, height * 0.5, width * 0.5 - 2 * borderWidth, height * 0.5 - 2 * borderWidth, 0, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.strokeStyle = buttonBorderColor;\r\n        ctx.stroke();\r\n\r\n        if (value && !this.inTouch) this.$resetTimer = window.setTimeout(this.resetCallback, 100);\r\n    }\r\n    handlePointerDown = () => {\r\n        this.inTouch = true;\r\n        this.setValueToOutput(1);\r\n    };\r\n    handlePointerUp = () => {\r\n        this.inTouch = false;\r\n        this.setValueToOutput(0);\r\n    };\r\n}\r\n","import type { BaseUIState } from \"@jspatcher/jspatcher/src/core/objects/base/BaseUI\";\r\nimport { MathUtils, Utils } from \"../sdk\";\r\nimport LiveObjectUI, { LiveObjectUIState, PointerDownEvent, PointerDragEvent } from \"./base\";\r\nimport type LiveDial from \"../objects/dial\";\r\nimport type { LiveDialProps } from \"../objects/dial\";\r\n\r\nexport interface LiveDialUIState extends LiveDialProps, LiveObjectUIState {\r\n    inputBuffer: string;\r\n}\r\nexport default class LiveDialUI extends LiveObjectUI<LiveDial, LiveDialUIState> {\r\n    static defaultSize: [number, number] = [45, 60];\r\n    state: LiveDialUIState & BaseUIState = {\r\n        ...this.state,\r\n        inputBuffer: \"\"\r\n    };\r\n    className = \"live-dial\";\r\n    interactionRect = [0, 0, 0, 0];\r\n    inTouch = false;\r\n    paint() {\r\n        const {\r\n            // width,\r\n            // height,\r\n            active,\r\n            focus,\r\n            fontFamily,\r\n            fontSize,\r\n            fontFace,\r\n            appearance,\r\n            triangle,\r\n            showName,\r\n            showNumber,\r\n            borderColor,\r\n            focusBorderColor,\r\n            panelColor,\r\n            activeNeedleColor,\r\n            needleColor,\r\n            activeDialColor,\r\n            dialColor,\r\n            activeFgDialColor,\r\n            fgDialColor,\r\n            textColor,\r\n            triBorderColor,\r\n            triColor,\r\n            shortName,\r\n            inputBuffer\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const distance = this.distance;\r\n        const displayValue = inputBuffer ? inputBuffer + \"_\" : this.displayValue;\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        const triangleHeight = 4;\r\n        const triangleLineWidth = 0.6;\r\n\r\n        let start: number;\r\n        let end: number;\r\n        let valPos: number;\r\n        let dialHeight: number;\r\n\r\n        if (appearance === \"tiny\") {\r\n            dialHeight = Math.min(width, height) / 3;\r\n            start = -3 * Math.PI * 0.5;\r\n            end = 0;\r\n            valPos = start + MathUtils.toRad(this.distance * 270);\r\n        } else {\r\n            dialHeight = Math.min(width, height) / 2;\r\n            start = Math.PI - 3 * Math.PI / 8;\r\n            end = 2 * Math.PI + 3 * Math.PI / 8;\r\n            valPos = start + MathUtils.toRad(this.distance * 315);\r\n        }\r\n        const dialRadius = dialHeight * 0.5;\r\n\r\n        let dialCenterX = width * 0.5;\r\n        let dialCenterY = height * 0.5 + 1;\r\n        if (appearance === \"panel\") {\r\n            dialCenterY += 10;\r\n        } else if (appearance === \"vertical\") {\r\n            if (showNumber) dialCenterY -= fontSize - 5;\r\n            if (showName) dialCenterY += fontSize - 5;\r\n            if (triangle) dialCenterY += triangleHeight - 1;\r\n        } else if (appearance === \"tiny\") {\r\n            if (showName) {\r\n                dialCenterY += 6;\r\n                dialCenterX = 10;\r\n            }\r\n        }\r\n        this.interactionRect = [0, dialCenterY - dialHeight * 0.5, width, dialHeight];\r\n        const arcStartX = dialCenterX + (dialHeight * 0.5 * Math.cos(start));\r\n        const arcStartY = dialCenterY + (dialHeight * 0.5 * Math.sin(start));\r\n        const arcEndX = dialCenterX + (dialHeight * 0.5 * Math.cos(end));\r\n        const arcEndY = dialCenterY + (dialHeight * 0.5 * Math.sin(end));\r\n        const valuePosX = dialCenterX + (dialHeight * 0.5 * Math.cos(valPos));\r\n        const valuePosY = dialCenterY + (dialHeight * 0.5 * Math.sin(valPos));\r\n        const endCapRadius = 1;\r\n        const lineWidth = 2;\r\n        let panelOffset = 0;\r\n\r\n        if (appearance === \"panel\") {\r\n            panelOffset = 5;\r\n            ctx.strokeStyle = focus ? focusBorderColor : borderColor;\r\n            ctx.lineWidth = 0.4;\r\n            Utils.roundedRect(ctx, 1, 1, width - 2, height - 2, 5);\r\n            ctx.fillStyle = panelColor;\r\n            Utils.fillRoundedRect(ctx, 1.2, 1.2, width - 2.4, 30 - 0.4, [5, 5, 0, 0]);\r\n        }\r\n\r\n        ctx.strokeStyle = active ? activeFgDialColor : fgDialColor;\r\n        ctx.fillStyle = ctx.strokeStyle;\r\n        ctx.lineWidth = lineWidth;\r\n        // draw background arc endcaps\r\n        ctx.beginPath();\r\n        ctx.arc(arcStartX, arcStartY, endCapRadius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.beginPath();\r\n        ctx.arc(arcEndX, arcEndY, endCapRadius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        // draw background arc\r\n        ctx.beginPath();\r\n        ctx.arc(dialCenterX, dialCenterY, dialRadius, start, end);\r\n        ctx.stroke();\r\n\r\n        // draw value arc, which changes if triangle is enabled\r\n        ctx.strokeStyle = active ? activeDialColor : dialColor;\r\n        ctx.fillStyle = ctx.strokeStyle;\r\n        if (triangle) {\r\n            const midpoint = (start + end) * 0.5;\r\n            ctx.strokeStyle = active ? activeDialColor : dialColor;\r\n            ctx.beginPath();\r\n            if (distance > 0.5) ctx.arc(dialCenterX, dialCenterY, dialRadius, midpoint, valPos);\r\n            else ctx.arc(dialCenterX, dialCenterY, dialRadius, valPos, midpoint);\r\n            ctx.stroke();\r\n        } else {\r\n            // draw value arc endcap\r\n            ctx.beginPath();\r\n            ctx.arc(arcStartX, arcStartY, endCapRadius, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n            // draw value arc\r\n            ctx.beginPath();\r\n            ctx.arc(dialCenterX, dialCenterY, dialRadius, start, valPos);\r\n            ctx.stroke();\r\n        }\r\n        // draw dial\r\n        // draw dial round endcaps\r\n        ctx.strokeStyle = active ? activeNeedleColor : needleColor;\r\n        ctx.fillStyle = ctx.strokeStyle;\r\n        ctx.beginPath();\r\n        ctx.arc(dialCenterX, dialCenterY, endCapRadius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.beginPath();\r\n        ctx.arc(valuePosX, valuePosY, endCapRadius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        // draw dial line\r\n        ctx.beginPath();\r\n        ctx.moveTo(dialCenterX, dialCenterY);\r\n        ctx.lineTo(valuePosX, valuePosY);\r\n        ctx.stroke();\r\n        // add text if it is enabled\r\n        ctx.font = `${fontFace === \"regular\" ? \"\" : fontFace} ${fontSize}px ${fontFamily}, sans-serif`;\r\n        ctx.fillStyle = textColor;\r\n        if (showName) {\r\n            if (appearance === \"tiny\") {\r\n                ctx.textAlign = \"left\";\r\n                ctx.fillText(shortName, 0, panelOffset + fontSize, width);\r\n            } else {\r\n                ctx.textAlign = \"center\";\r\n                ctx.fillText(shortName, width * 0.5, panelOffset + fontSize, width);\r\n            }\r\n        }\r\n        if (showNumber) {\r\n            const tinyOffset = appearance === \"tiny\" ? 12 : 0;\r\n            if (appearance === \"tiny\") {\r\n                ctx.textAlign = \"left\";\r\n                ctx.fillText(displayValue, tinyOffset, height - 2, width);\r\n            } else {\r\n                ctx.textAlign = \"center\";\r\n                ctx.fillText(displayValue, width * 0.5, height - 2, width);\r\n            }\r\n        }\r\n        // draw triangle if it is enabled\r\n        if (triangle) {\r\n            if (!distance) ctx.fillStyle = triColor;\r\n            else if (!active) ctx.fillStyle = dialColor;\r\n            else ctx.fillStyle = activeDialColor;\r\n            ctx.beginPath();\r\n            if (appearance === \"tiny\") {\r\n                const tipPositionX = dialCenterX + dialHeight * 0.5 * Math.cos(-3 * Math.PI / 4) - 1;\r\n                const tipPositionY = dialCenterY + dialHeight * 0.5 * Math.sin(-3 * Math.PI / 4) - 1;\r\n                ctx.moveTo(tipPositionX, tipPositionY);\r\n                ctx.lineTo(tipPositionX - triangleHeight, tipPositionY);\r\n                ctx.lineTo(tipPositionX, tipPositionY - triangleHeight);\r\n                ctx.lineTo(tipPositionX, tipPositionY);\r\n            } else {\r\n                ctx.moveTo(dialCenterX, dialCenterY - dialRadius - 1);\r\n                ctx.lineTo(dialCenterX - triangleHeight, dialCenterY - dialRadius - 1 - triangleHeight);\r\n                ctx.lineTo(dialCenterX + triangleHeight, dialCenterY - dialRadius - 1 - triangleHeight);\r\n                ctx.lineTo(dialCenterX, dialCenterY - dialRadius - 1);\r\n            }\r\n            ctx.fill();\r\n            ctx.strokeStyle = triBorderColor || \"transparent\";\r\n            ctx.lineWidth = triangleLineWidth;\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    getValueFromDelta(e: PointerDragEvent) {\r\n        const { type, min, max, enums, exponent } = this.state;\r\n        const step = type === \"enum\" ? 1 : (this.state.step || 1);\r\n        const totalPixels = 100;\r\n        const stepsCount = this.stepsCount;\r\n        const stepPixels = totalPixels / stepsCount;\r\n        const prevPixels = LiveObjectUI.getDistance({ value: e.prevValue, type, min, max, enums, exponent }) * totalPixels;\r\n        const pixels = prevPixels + e.fromY - e.y;\r\n        let steps = Math.round(MathUtils.normExp(pixels / totalPixels, exponent) * totalPixels / stepPixels);\r\n        steps = Math.min(stepsCount, Math.max(0, steps));\r\n        if (type === \"enum\") return steps;\r\n        if (type === \"int\") return Math.round(steps * step + min);\r\n        return steps * step + min;\r\n    }\r\n    handlePointerDown = (e: PointerDownEvent) => {\r\n        if (\r\n            e.x < this.interactionRect[0]\r\n            || e.x > this.interactionRect[0] + this.interactionRect[2]\r\n            || e.y < this.interactionRect[1]\r\n            || e.y > this.interactionRect[1] + this.interactionRect[3]\r\n        ) return;\r\n        this.inTouch = true;\r\n    };\r\n    handlePointerDrag = (e: PointerDragEvent) => {\r\n        if (!this.inTouch) return;\r\n        const newValue = this.getValueFromDelta(e);\r\n        if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n    };\r\n    handlePointerUp = () => {\r\n        this.inTouch = false;\r\n    };\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (!this.state.inputBuffer) {\r\n            let addStep = 0;\r\n            if (e.key === \"ArrowUp\" || e.key === \"ArrowRight\") addStep = 1;\r\n            if (e.key === \"ArrowDown\" || e.key === \"ArrowLeft\") addStep = -1;\r\n            if (addStep !== 0) {\r\n                const newValue = this.object.toValidValue(this.state.value + this.state.step * addStep);\r\n                if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n            }\r\n        }\r\n        if (e.key.match(/[0-9.-]/)) {\r\n            this.setState({ inputBuffer: this.state.inputBuffer + e.key });\r\n            return;\r\n        }\r\n        if (e.key === \"Backspace\") {\r\n            this.setState({ inputBuffer: this.state.inputBuffer.slice(0, -1) });\r\n            return;\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            const newValue = this.object.toValidValue(+this.state.inputBuffer);\r\n            this.setState({ inputBuffer: \"\" });\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n    };\r\n    handleFocusOut = () => {\r\n        if (this.state.inputBuffer) {\r\n            const newValue = this.object.toValidValue(+this.state.inputBuffer);\r\n            this.setState({ inputBuffer: \"\" });\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n        this.setState({ focus: false });\r\n    };\r\n}\r\n","import type { BaseUIState } from \"@jspatcher/jspatcher/src/core/objects/base/BaseUI\";\r\nimport { MathUtils } from \"../sdk\";\r\nimport LiveObjectUI, { LiveObjectUIState, PointerDownEvent, PointerDragEvent } from \"./base\";\r\nimport type LiveGain from \"../objects/gain\";\r\nimport type { LiveGainProps } from \"../objects/gain\";\r\n\r\nexport interface LiveGainUIState extends Omit<LiveGainProps, \"thresholdLinear\" | \"thresholdDB\" | \"windowSize\" | \"speedLim\">, LiveObjectUIState {\r\n    levels: number[];\r\n    inputBuffer: string;\r\n}\r\nexport default class LiveGainUI extends LiveObjectUI<LiveGain, LiveGainUIState> {\r\n    static defaultSize: [number, number] = [120, 45];\r\n    state: LiveGainUIState & BaseUIState = {\r\n        ...this.state,\r\n        levels: this.object._.levels,\r\n        inputBuffer: \"\"\r\n    };\r\n    className = \"live-gain\";\r\n    interactionRect: number[] = [0, 0, 0, 0];\r\n    inTouch = false;\r\n    levels: number[] = [];\r\n    maxValues: number[] = [];\r\n    maxTimer: number;\r\n    paint() {\r\n        const {\r\n            // width,\r\n            // height,\r\n            fontFamily,\r\n            fontSize,\r\n            fontFace,\r\n            orientation,\r\n            showName,\r\n            showNumber,\r\n            textColor,\r\n            triBorderColor,\r\n            triOnColor,\r\n            triColor,\r\n            shortName,\r\n            levels,\r\n            min,\r\n            max,\r\n            exponent,\r\n            active,\r\n            mode,\r\n            bgColor,\r\n            coldColor,\r\n            warmColor,\r\n            hotColor,\r\n            overloadColor,\r\n            inactiveColdColor,\r\n            inactiveWarmColor,\r\n            inputBuffer\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const lineWidth = 0.5;\r\n        const padding = 8;\r\n        const distance = this.distance;\r\n        const displayValue = inputBuffer ? inputBuffer + \"_\" : this.displayValue;\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        this.levels = levels.slice();\r\n        if (this.levels.length === 0) this.levels = [min];\r\n        if (this.levels.find((v, i) => typeof this.maxValues[i] === \"undefined\" || v > this.maxValues[i])) {\r\n            this.maxValues = [...this.levels];\r\n            if (this.maxTimer) window.clearTimeout(this.maxTimer);\r\n            this.maxTimer = window.setTimeout(() => {\r\n                this.maxValues = [...this.levels];\r\n                this.maxTimer = undefined;\r\n                this.schedulePaint();\r\n            }, 1000);\r\n        } else if (this.levels.find((v, i) => v < this.maxValues[i]) && typeof this.maxTimer === \"undefined\") {\r\n            this.maxTimer = window.setTimeout(() => {\r\n                this.maxValues = [...this.levels];\r\n                this.maxTimer = undefined;\r\n                this.schedulePaint();\r\n            }, 1000);\r\n        }\r\n\r\n        const channels = this.levels.length;\r\n        const clipValue = +(mode === \"linear\");\r\n        const meterThick = 8;\r\n        const metersThick = (meterThick + 1) * channels - 1;\r\n\r\n        ctx.font = `${fontFace === \"regular\" ? \"\" : fontFace} ${fontSize}px ${fontFamily}, sans-serif`;\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillStyle = textColor;\r\n        if (showName) ctx.fillText(shortName, width * 0.5, fontSize, width);\r\n        if (showNumber) {\r\n            if (orientation === \"horizontal\") {\r\n                ctx.textAlign = \"left\";\r\n                ctx.fillText(displayValue, 4, height - 2, width);\r\n            } else {\r\n                ctx.fillText(displayValue, width * 0.5, height - 2, width);\r\n            }\r\n        }\r\n        this.interactionRect = [\r\n            0,\r\n            fontSize + padding,\r\n            width,\r\n            height - 2 * (fontSize + padding)\r\n        ];\r\n\r\n        ctx.save();\r\n        let $width: number;\r\n        const $height = meterThick;\r\n        if (orientation === \"horizontal\") {\r\n            $width = width;\r\n            ctx.translate(0, (height - metersThick) * 0.5);\r\n        } else {\r\n            $width = this.interactionRect[3];\r\n            ctx.translate((width - metersThick) * 0.5, height - fontSize - padding);\r\n            ctx.rotate(-Math.PI * 0.5);\r\n        }\r\n        ctx.fillStyle = bgColor;\r\n        if (min >= clipValue || clipValue >= max) {\r\n            const fgColor = min >= clipValue ? active ? overloadColor : inactiveWarmColor : active ? coldColor : inactiveColdColor;\r\n            let $top = 0;\r\n            this.levels.forEach((v) => {\r\n                if (v < max) ctx.fillRect(0, $top, $width, $height);\r\n                $top += $height + 1;\r\n            });\r\n            $top = 0;\r\n            ctx.fillStyle = fgColor;\r\n            this.levels.forEach((v, i) => {\r\n                const distance = LiveObjectUI.getDistance({ type: \"float\", value: v, min, max, exponent });\r\n                if (distance > 0) ctx.fillRect(0, $top, distance * $width, $height);\r\n                const histMax = this.maxValues[i];\r\n                if (typeof histMax === \"number\" && histMax > v) {\r\n                    const histDistance = LiveObjectUI.getDistance({ type: \"float\", value: histMax, min, max, exponent });\r\n                    ctx.fillRect(Math.min($width - 1, histDistance * $width), $top, 1, $height);\r\n                }\r\n                $top += $height + 1;\r\n            });\r\n        } else {\r\n            const clipDistance = LiveObjectUI.getDistance({ type: \"float\", value: clipValue, min, max, exponent });\r\n            const clip = $width - clipDistance * $width;\r\n            const hotStop = $width - clip;\r\n            const warmStop = hotStop - 1;\r\n            const gradient = ctx.createLinearGradient(0, 0, $width, 0);\r\n            gradient.addColorStop(0, active ? coldColor : inactiveColdColor);\r\n            gradient.addColorStop(warmStop / $width, active ? warmColor : inactiveWarmColor);\r\n            gradient.addColorStop(hotStop / $width, active ? hotColor : inactiveWarmColor);\r\n            gradient.addColorStop(1, active ? overloadColor : inactiveWarmColor);\r\n            let $top = 0;\r\n            this.levels.forEach((v) => {\r\n                if (v < clipValue) ctx.fillRect(0, $top, warmStop, $height);\r\n                if (v < max) ctx.fillRect(hotStop, $top, clip, $height);\r\n                $top += $height + 1;\r\n            });\r\n            $top = 0;\r\n            ctx.fillStyle = gradient;\r\n            this.levels.forEach((v, i) => {\r\n                const distance = LiveObjectUI.getDistance({ type: \"float\", value: v, min, max, exponent });\r\n                if (distance > 0) ctx.fillRect(0, $top, Math.min(warmStop, distance * $width), $height);\r\n                if (distance > clipDistance) ctx.fillRect(hotStop, $top, Math.min(clip, (distance - clipDistance) * $width), $height);\r\n                const histMax = this.maxValues[i];\r\n                if (typeof histMax === \"number\" && histMax > v) {\r\n                    const histDistance = LiveObjectUI.getDistance({ type: \"float\", value: histMax, min, max, exponent });\r\n                    if (histDistance <= clipDistance) ctx.fillRect(histDistance * $width, $top, 1, $height);\r\n                    else ctx.fillRect(Math.min($width - 1, histDistance * $width), $top, 1, $height);\r\n                }\r\n                $top += $height + 1;\r\n            });\r\n        }\r\n\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = triBorderColor;\r\n        const triOrigin: [number, number] = [\r\n            $width * distance,\r\n            metersThick + lineWidth\r\n        ];\r\n        ctx.beginPath();\r\n        ctx.moveTo(triOrigin[0], triOrigin[1]);\r\n        ctx.lineTo(triOrigin[0] - 4, triOrigin[1] + 8);\r\n        ctx.lineTo(triOrigin[0] + 4, triOrigin[1] + 8);\r\n        ctx.lineTo(triOrigin[0], triOrigin[1]);\r\n        ctx.stroke();\r\n\r\n        ctx.fillStyle = this.inTouch ? triOnColor : triColor;\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n    getValueFromPos(e: PointerDownEvent) {\r\n        const { orientation, type, min, exponent } = this.state;\r\n        const step = type === \"enum\" ? 1 : (this.state.step || 1);\r\n        const totalPixels = orientation === \"vertical\" ? this.interactionRect[3] : this.interactionRect[2];\r\n        const stepsCount = this.stepsCount;\r\n        const stepPixels = totalPixels / stepsCount;\r\n        const pixels = orientation === \"vertical\" ? this.interactionRect[3] - (e.y - this.interactionRect[1]) : e.x - this.interactionRect[0];\r\n        let steps = Math.round(MathUtils.normExp(pixels / totalPixels, exponent) * totalPixels / stepPixels);\r\n        steps = Math.min(stepsCount, Math.max(0, steps));\r\n        if (type === \"enum\") return steps;\r\n        if (type === \"int\") return Math.round(steps * step + min);\r\n        return steps * step + min;\r\n    }\r\n    getValueFromDelta(e: PointerDragEvent) {\r\n        const { type, min, max, enums, exponent, orientation } = this.state;\r\n        const step = type === \"enum\" ? 1 : (this.state.step || 1);\r\n        const totalPixels = orientation === \"horizontal\" ? this.interactionRect[2] : this.interactionRect[3];\r\n        const stepsCount = this.stepsCount;\r\n        const stepPixels = totalPixels / stepsCount;\r\n        const prevPixels = LiveObjectUI.getDistance({ value: e.prevValue, type, min, max, enums, exponent }) * totalPixels;\r\n        const pixels = prevPixels + (orientation === \"horizontal\" ? e.x - e.fromX : e.fromY - e.y);\r\n        let steps = Math.round(MathUtils.normExp(pixels / totalPixels, exponent) * totalPixels / stepPixels);\r\n        steps = Math.min(stepsCount, Math.max(0, steps));\r\n        if (type === \"enum\") return steps;\r\n        if (type === \"int\") return Math.round(steps * step + min);\r\n        return steps * step + min;\r\n    }\r\n    handlePointerDown = (e: PointerDownEvent) => {\r\n        if (\r\n            e.x < this.interactionRect[0]\r\n            || e.x > this.interactionRect[0] + this.interactionRect[2]\r\n            || e.y < this.interactionRect[1]\r\n            || e.y > this.interactionRect[1] + this.interactionRect[3]\r\n        ) return;\r\n        if (!this.state.relative) {\r\n            const newValue = this.getValueFromPos(e);\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n        this.inTouch = true;\r\n    };\r\n    handlePointerDrag = (e: PointerDragEvent) => {\r\n        if (!this.inTouch) return;\r\n        let newValue;\r\n        if (this.state.relative) newValue = this.getValueFromDelta(e);\r\n        else newValue = this.getValueFromPos(e);\r\n        if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n    };\r\n    handlePointerUp = () => {\r\n        this.inTouch = false;\r\n    };\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (!this.state.inputBuffer) {\r\n            let addStep = 0;\r\n            if (e.key === \"ArrowUp\" || e.key === \"ArrowRight\") addStep = 1;\r\n            if (e.key === \"ArrowDown\" || e.key === \"ArrowLeft\") addStep = -1;\r\n            if (addStep !== 0) {\r\n                const newValue = this.object.toValidValue(this.state.value + this.state.step * addStep);\r\n                if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n            }\r\n        }\r\n        if (e.key.match(/[0-9.-]/)) {\r\n            this.setState({ inputBuffer: this.state.inputBuffer + e.key });\r\n            return;\r\n        }\r\n        if (e.key === \"Backspace\") {\r\n            this.setState({ inputBuffer: this.state.inputBuffer.slice(0, -1) });\r\n            return;\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            const newValue = this.object.toValidValue(+this.state.inputBuffer);\r\n            this.setState({ inputBuffer: \"\" });\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n    };\r\n    handleFocusOut = () => {\r\n        if (this.state.inputBuffer) {\r\n            const newValue = this.object.toValidValue(+this.state.inputBuffer);\r\n            this.setState({ inputBuffer: \"\" });\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n        this.setState({ focus: false });\r\n    };\r\n}\r\n","import type { BaseUIState } from \"@jspatcher/jspatcher/src/core/objects/base/BaseUI\";\r\nimport type { CanvasUIState } from \"@jspatcher/jspatcher/src/core/objects/base/CanvasUI\";\r\nimport LiveMeter, { LiveMeterProps } from \"../objects/meter\";\r\nimport { CanvasUI } from \"../sdk\";\r\nimport LiveObjectUI from \"./base\";\r\n\r\n\r\nexport interface LiveMeterUIState extends Omit<LiveMeterProps, \"thresholdLinear\" | \"thresholdDB\" | \"windowSize\" | \"speedLim\">, CanvasUIState {\r\n    levels: number[];\r\n}\r\nexport default class LiveMeterUI extends CanvasUI<LiveMeter, {}, LiveMeterUIState> {\r\n    state: LiveMeterUIState & BaseUIState = {\r\n        ...this.state,\r\n        levels: this.object._.levels\r\n    };\r\n    levels: number[] = [];\r\n    maxValues: number[] = [];\r\n    maxTimer: number;\r\n    paint() {\r\n        const {\r\n            // width,\r\n            // height,\r\n            active,\r\n            mode,\r\n            levels,\r\n            min,\r\n            max,\r\n            orientation,\r\n            bgColor,\r\n            coldColor,\r\n            warmColor,\r\n            hotColor,\r\n            overloadColor,\r\n            inactiveColdColor,\r\n            inactiveWarmColor\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n\r\n        let [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        this.levels = levels.slice();\r\n        if (this.levels.length === 0) this.levels = [min];\r\n        if (this.levels.find((v, i) => typeof this.maxValues[i] === \"undefined\" || v > this.maxValues[i])) {\r\n            this.maxValues = [...this.levels];\r\n            if (this.maxTimer) window.clearTimeout(this.maxTimer);\r\n            this.maxTimer = window.setTimeout(() => {\r\n                this.maxValues = [...this.levels];\r\n                this.maxTimer = undefined;\r\n                this.schedulePaint();\r\n            }, 1000);\r\n        } else if (this.levels.find((v, i) => v < this.maxValues[i]) && typeof this.maxTimer === \"undefined\") {\r\n            this.maxTimer = window.setTimeout(() => {\r\n                this.maxValues = [...this.levels];\r\n                this.maxTimer = undefined;\r\n                this.schedulePaint();\r\n            }, 1000);\r\n        }\r\n        const channels = this.levels.length;\r\n        const clipValue = +(mode === \"linear\");\r\n        if (orientation === \"vertical\") {\r\n            ctx.save();\r\n            ctx.translate(0, height);\r\n            ctx.rotate(-Math.PI * 0.5);\r\n            [height, width] = [width, height];\r\n        }\r\n        const $height = (height - channels - 1) / this.levels.length;\r\n        ctx.fillStyle = bgColor;\r\n        if (min >= clipValue || clipValue >= max) {\r\n            const fgColor = min >= clipValue ? active ? overloadColor : inactiveWarmColor : active ? coldColor : inactiveColdColor;\r\n            let $top = 0;\r\n            this.levels.forEach((v) => {\r\n                if (v < max) ctx.fillRect(0, $top, width, $height);\r\n                $top += $height + 1;\r\n            });\r\n            $top = 0;\r\n            ctx.fillStyle = fgColor;\r\n            this.levels.forEach((v, i) => {\r\n                const distance = LiveObjectUI.getDistance({ type: \"float\", value: v, min, max, exponent: 0 });\r\n                if (distance > 0) ctx.fillRect(0, $top, distance * width, $height);\r\n                const histMax = this.maxValues[i];\r\n                if (typeof histMax === \"number\" && histMax > v) {\r\n                    const histDistance = LiveObjectUI.getDistance({ type: \"float\", value: histMax, min, max, exponent: 0 });\r\n                    ctx.fillRect(Math.min(width - 1, histDistance * width), $top, 1, $height);\r\n                }\r\n                $top += $height + 1;\r\n            });\r\n        } else {\r\n            const clipDistance = LiveObjectUI.getDistance({ type: \"float\", value: clipValue, min, max, exponent: 0 });\r\n            const clip = width - clipDistance * width;\r\n            const hotStop = width - clip;\r\n            const warmStop = hotStop - 1;\r\n            const gradient = ctx.createLinearGradient(0, 0, width, 0);\r\n            gradient.addColorStop(0, active ? coldColor : inactiveColdColor);\r\n            gradient.addColorStop(warmStop / width, active ? warmColor : inactiveWarmColor);\r\n            gradient.addColorStop(hotStop / width, active ? hotColor : inactiveWarmColor);\r\n            gradient.addColorStop(1, active ? overloadColor : inactiveWarmColor);\r\n            let $top = 0;\r\n            this.levels.forEach((v) => {\r\n                if (v < clipValue) ctx.fillRect(0, $top, warmStop, $height);\r\n                if (v < max) ctx.fillRect(hotStop, $top, clip, $height);\r\n                $top += $height + 1;\r\n            });\r\n            $top = 0;\r\n            ctx.fillStyle = gradient;\r\n            this.levels.forEach((v, i) => {\r\n                const distance = LiveObjectUI.getDistance({ type: \"float\", value: v, min, max, exponent: 0 });\r\n                if (distance > 0) ctx.fillRect(0, $top, Math.min(warmStop, distance * width), $height);\r\n                if (distance > clipDistance) ctx.fillRect(hotStop, $top, Math.min(clip, (distance - clipDistance) * width), $height);\r\n                const histMax = this.maxValues[i];\r\n                if (typeof histMax === \"number\" && histMax > v) {\r\n                    const histDistance = LiveObjectUI.getDistance({ type: \"float\", value: histMax, min, max, exponent: 0 });\r\n                    if (histDistance <= clipDistance) ctx.fillRect(histDistance * width, $top, 1, $height);\r\n                    else ctx.fillRect(Math.min(width - 1, histDistance * width), $top, 1, $height);\r\n                }\r\n                $top += $height + 1;\r\n            });\r\n        }\r\n        if (orientation === \"vertical\") ctx.restore();\r\n    }\r\n}\r\n","import type { BaseUIState } from \"@jspatcher/jspatcher/src/core/objects/base/BaseUI\";\r\nimport { MathUtils } from \"../sdk\";\r\nimport LiveObjectUI, { LiveObjectUIState, PointerDragEvent } from \"./base\";\r\nimport type LiveNumbox from \"../objects/numbox\";\r\nimport type { LiveNumboxProps } from \"../objects/numbox\";\r\n\r\nexport interface LiveNumboxUIState extends LiveNumboxProps, LiveObjectUIState {\r\n    inputBuffer: string;\r\n}\r\nexport default class LiveNumboxUI extends LiveObjectUI<LiveNumbox, LiveNumboxUIState> {\r\n    state: LiveNumboxUIState & BaseUIState = {\r\n        ...this.state,\r\n        inputBuffer: \"\"\r\n    };\r\n    className = \"live-numbox\";\r\n    paint() {\r\n        const {\r\n            // width,\r\n            // height,\r\n            active,\r\n            focus,\r\n            fontFamily,\r\n            fontSize,\r\n            fontFace,\r\n            appearance,\r\n            bgColor,\r\n            activeBgColor,\r\n            borderColor,\r\n            focusBorderColor,\r\n            textColor,\r\n            triColor,\r\n            activeTriColor,\r\n            triColor2,\r\n            activeTriColor2,\r\n            activeSliderColor,\r\n            inputBuffer\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const distance = this.distance;\r\n        const displayValue = inputBuffer ? inputBuffer + \"_\" : this.displayValue;\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        // draw background\r\n        ctx.fillStyle = active ? activeBgColor : bgColor;\r\n        ctx.rect(0, 0, width, height);\r\n        ctx.fill();\r\n\r\n        if (appearance === \"slider\" && active && distance) {\r\n            ctx.fillStyle = activeSliderColor;\r\n            ctx.fillRect(0, 0, distance * width, height);\r\n        }\r\n\r\n        // draw border (eventually we might need to redefine the shape)\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = focus ? focusBorderColor : borderColor;\r\n        ctx.stroke();\r\n\r\n        if (appearance === \"triangle\") {\r\n            const triangleHeight = 8;\r\n            ctx.fillStyle = active ? (distance ? activeTriColor2 : activeTriColor) : (distance ? triColor2 : triColor);\r\n            ctx.beginPath();\r\n            ctx.moveTo(width - triangleHeight - 1, height * 0.5);\r\n            ctx.lineTo(width - 1, 1);\r\n            ctx.lineTo(width - 1, height - 1);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        // display the text\r\n        ctx.font = `${fontFace === \"regular\" ? \"\" : fontFace} ${fontSize}px ${fontFamily}, sans-serif`;\r\n        ctx.fillStyle = textColor;\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.fillText(displayValue, width * 0.5, height * 0.5, width);\r\n    }\r\n    getValueFromDelta(e: PointerDragEvent) {\r\n        const { type, min, max, enums, exponent } = this.state;\r\n        const step = type === \"enum\" ? 1 : (this.state.step || 1);\r\n        const totalPixels = 100;\r\n        const stepsCount = this.stepsCount;\r\n        const stepPixels = totalPixels / stepsCount;\r\n        const prevPixels = LiveObjectUI.getDistance({ value: e.prevValue, type, min, max, enums, exponent }) * totalPixels;\r\n        const pixels = prevPixels + e.fromY - e.y;\r\n        let steps = Math.round(MathUtils.normExp(pixels / totalPixels, exponent) * totalPixels / stepPixels);\r\n        steps = Math.min(stepsCount, Math.max(0, steps));\r\n        if (type === \"enum\") return steps;\r\n        if (type === \"int\") return Math.round(steps * step + min);\r\n        return steps * step + min;\r\n    }\r\n    handlePointerDrag = (e: PointerDragEvent) => {\r\n        const newValue = this.getValueFromDelta(e);\r\n        if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n    };\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (!this.state.inputBuffer) {\r\n            let addStep = 0;\r\n            if (e.key === \"ArrowUp\" || e.key === \"ArrowRight\") addStep = 1;\r\n            if (e.key === \"ArrowDown\" || e.key === \"ArrowLeft\") addStep = -1;\r\n            if (addStep !== 0) {\r\n                const newValue = this.object.toValidValue(this.state.value + this.state.step * addStep);\r\n                if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n            }\r\n        }\r\n        if (e.key.match(/[0-9.-]/)) {\r\n            this.setState({ inputBuffer: this.state.inputBuffer + e.key });\r\n            return;\r\n        }\r\n        if (e.key === \"Backspace\") {\r\n            this.setState({ inputBuffer: this.state.inputBuffer.slice(0, -1) });\r\n            return;\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            const newValue = this.object.toValidValue(+this.state.inputBuffer);\r\n            this.setState({ inputBuffer: \"\" });\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n    };\r\n    handleFocusOut = () => {\r\n        if (this.state.inputBuffer) {\r\n            const newValue = this.object.toValidValue(+this.state.inputBuffer);\r\n            this.setState({ inputBuffer: \"\" });\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n        this.setState({ focus: false });\r\n    };\r\n}\r\n","import type { BaseUIState } from \"@jspatcher/jspatcher/src/core/objects/base/BaseUI\";\r\nimport { MathUtils } from \"../sdk\";\r\nimport LiveObjectUI, { LiveObjectUIState, PointerDownEvent, PointerDragEvent } from \"./base\";\r\nimport type LiveSlider from \"../objects/slider\";\r\nimport type { LiveSliderProps } from \"../objects/slider\";\r\n\r\nexport interface LiveSliderUIState extends LiveSliderProps, LiveObjectUIState {\r\n    inputBuffer: string;\r\n}\r\nexport default class LiveSliderUI extends LiveObjectUI<LiveSlider, LiveSliderUIState> {\r\n    static defaultSize: [number, number] = [120, 45];\r\n    state: LiveSliderUIState & BaseUIState = {\r\n        ...this.state,\r\n        inputBuffer: \"\"\r\n    };\r\n    className = \"live-slider\";\r\n    interactionRect: number[] = [0, 0, 0, 0];\r\n    inTouch = false;\r\n    paint() {\r\n        const {\r\n            // width,\r\n            // height,\r\n            fontFamily,\r\n            fontSize,\r\n            fontFace,\r\n            orientation,\r\n            showName,\r\n            showNumber,\r\n            sliderColor,\r\n            textColor,\r\n            triBorderColor,\r\n            triOnColor,\r\n            triColor,\r\n            shortName,\r\n            inputBuffer\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const lineWidth = 0.5;\r\n        const padding = 8;\r\n        const distance = this.distance;\r\n        const displayValue = inputBuffer ? inputBuffer + \"_\" : this.displayValue;\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = sliderColor;\r\n\r\n        if (orientation === \"vertical\") {\r\n            ctx.beginPath();\r\n            ctx.moveTo(width * 0.5, fontSize + padding);\r\n            ctx.lineTo(width * 0.5, height - (fontSize + padding));\r\n            ctx.stroke();\r\n\r\n            const interactionWidth = width * 0.5;\r\n            this.interactionRect = [\r\n                width * 0.5 - interactionWidth * 0.5,\r\n                fontSize + padding,\r\n                interactionWidth,\r\n                height - 2 * (fontSize + padding)\r\n            ];\r\n\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeStyle = triBorderColor;\r\n            const triOrigin: [number, number] = [\r\n                width * 0.5 + lineWidth * 0.5 + 0.5,\r\n                this.interactionRect[1] - 4 + this.interactionRect[3] * (1 - distance)\r\n            ];\r\n            ctx.beginPath();\r\n            ctx.moveTo(triOrigin[0], triOrigin[1] + 4);\r\n            ctx.lineTo(triOrigin[0] + 8, triOrigin[1]);\r\n            ctx.lineTo(triOrigin[0] + 8, triOrigin[1] + 8);\r\n            ctx.lineTo(triOrigin[0], triOrigin[1] + 4);\r\n            ctx.stroke();\r\n\r\n            ctx.fillStyle = this.inTouch ? triOnColor : triColor;\r\n            ctx.fill();\r\n\r\n            ctx.font = `${fontFace === \"regular\" ? \"\" : fontFace} ${fontSize}px ${fontFamily}, sans-serif`;\r\n            ctx.textAlign = \"center\";\r\n            ctx.fillStyle = textColor;\r\n            if (showName) ctx.fillText(shortName, width * 0.5, fontSize, width);\r\n            if (showNumber) ctx.fillText(displayValue, width * 0.5, height - 2, width);\r\n        } else {\r\n            ctx.beginPath();\r\n            ctx.moveTo(padding, height * 0.5);\r\n            ctx.lineTo(width - padding, height * 0.5);\r\n            ctx.stroke();\r\n\r\n            const interactionWidth = height * 0.5;\r\n            this.interactionRect = [\r\n                padding,\r\n                height * 0.5 - interactionWidth * 0.5,\r\n                width - 2 * padding,\r\n                interactionWidth\r\n            ];\r\n\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeStyle = triBorderColor;\r\n            const triOrigin: [number, number] = [\r\n                this.interactionRect[0] + this.interactionRect[2] * distance - 4,\r\n                height * 0.5 + lineWidth * 0.5 + 2\r\n            ];\r\n            ctx.beginPath();\r\n            ctx.moveTo(triOrigin[0], triOrigin[1] + 8);\r\n            ctx.lineTo(triOrigin[0] + 4, triOrigin[1]);\r\n            ctx.lineTo(triOrigin[0] + 8, triOrigin[1] + 8);\r\n            ctx.lineTo(triOrigin[0], triOrigin[1] + 8);\r\n            ctx.stroke();\r\n\r\n            ctx.fillStyle = this.inTouch ? triOnColor : triColor;\r\n            ctx.fill();\r\n\r\n            ctx.font = `${fontFace === \"regular\" ? \"\" : fontFace} ${fontSize}px ${fontFamily}, sans-serif`;\r\n            ctx.textAlign = \"center\";\r\n            ctx.fillStyle = textColor;\r\n            if (showName) ctx.fillText(shortName, width * 0.5, fontSize, width);\r\n            ctx.textAlign = \"left\";\r\n            if (showNumber) ctx.fillText(displayValue, 4, height - 2, width);\r\n        }\r\n    }\r\n    getValueFromPos(e: PointerDownEvent) {\r\n        const { orientation, type, min, exponent } = this.state;\r\n        const step = type === \"enum\" ? 1 : (this.state.step || 1);\r\n        const totalPixels = orientation === \"vertical\" ? this.interactionRect[3] : this.interactionRect[2];\r\n        const stepsCount = this.stepsCount;\r\n        const stepPixels = totalPixels / stepsCount;\r\n        const pixels = orientation === \"vertical\" ? this.interactionRect[3] - (e.y - this.interactionRect[1]) : e.x - this.interactionRect[0];\r\n        let steps = Math.round(MathUtils.normExp(pixels / totalPixels, exponent) * totalPixels / stepPixels);\r\n        steps = Math.min(stepsCount, Math.max(0, steps));\r\n        if (type === \"enum\") return steps;\r\n        if (type === \"int\") return Math.round(steps * step + min);\r\n        return steps * step + min;\r\n    }\r\n    getValueFromDelta(e: PointerDragEvent) {\r\n        const { type, min, max, enums, exponent, orientation } = this.state;\r\n        const step = type === \"enum\" ? 1 : (this.state.step || 1);\r\n        const totalPixels = orientation === \"horizontal\" ? this.interactionRect[2] : this.interactionRect[3];\r\n        const stepsCount = this.stepsCount;\r\n        const stepPixels = totalPixels / stepsCount;\r\n        const prevPixels = LiveObjectUI.getDistance({ value: e.prevValue, type, min, max, enums, exponent }) * totalPixels;\r\n        const pixels = prevPixels + (orientation === \"horizontal\" ? e.x - e.fromX : e.fromY - e.y);\r\n        let steps = Math.round(MathUtils.normExp(pixels / totalPixels, exponent) * totalPixels / stepPixels);\r\n        steps = Math.min(stepsCount, Math.max(0, steps));\r\n        if (type === \"enum\") return steps;\r\n        if (type === \"int\") return Math.round(steps * step + min);\r\n        return steps * step + min;\r\n    }\r\n    handlePointerDown = (e: PointerDownEvent) => {\r\n        if (\r\n            e.x < this.interactionRect[0]\r\n            || e.x > this.interactionRect[0] + this.interactionRect[2]\r\n            || e.y < this.interactionRect[1]\r\n            || e.y > this.interactionRect[1] + this.interactionRect[3]\r\n        ) return;\r\n        if (!this.state.relative) {\r\n            const newValue = this.getValueFromPos(e);\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n        this.inTouch = true;\r\n    };\r\n    handlePointerDrag = (e: PointerDragEvent) => {\r\n        if (!this.inTouch) return;\r\n        let newValue;\r\n        if (this.state.relative) newValue = this.getValueFromDelta(e);\r\n        else newValue = this.getValueFromPos(e);\r\n        if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n    };\r\n    handlePointerUp = () => {\r\n        this.inTouch = false;\r\n    };\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (!this.state.inputBuffer) {\r\n            let addStep = 0;\r\n            if (e.key === \"ArrowUp\" || e.key === \"ArrowRight\") addStep = 1;\r\n            if (e.key === \"ArrowDown\" || e.key === \"ArrowLeft\") addStep = -1;\r\n            if (addStep !== 0) {\r\n                const newValue = this.object.toValidValue(this.state.value + this.state.step * addStep);\r\n                if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n            }\r\n        }\r\n        if (e.key.match(/[0-9.-]/)) {\r\n            this.setState({ inputBuffer: this.state.inputBuffer + e.key });\r\n            return;\r\n        }\r\n        if (e.key === \"Backspace\") {\r\n            this.setState({ inputBuffer: this.state.inputBuffer.slice(0, -1) });\r\n            return;\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            const newValue = this.object.toValidValue(+this.state.inputBuffer);\r\n            this.setState({ inputBuffer: \"\" });\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n    };\r\n    handleFocusOut = () => {\r\n        if (this.state.inputBuffer) {\r\n            const newValue = this.object.toValidValue(+this.state.inputBuffer);\r\n            this.setState({ inputBuffer: \"\" });\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n        this.setState({ focus: false });\r\n    };\r\n}\r\n","import type { TRect } from \"@jspatcher/jspatcher/src/core/types\";\r\nimport LiveObjectUI, { LiveObjectUIState, PointerDownEvent, PointerDragEvent } from \"./base\";\r\nimport type LiveTab from \"../objects/tab\";\r\nimport type { LiveTabProps } from \"../objects/tab\";\r\n\r\nexport interface LiveTabUIState extends LiveTabProps, LiveObjectUIState {}\r\nexport default class LiveTabUI extends LiveObjectUI<LiveTab, LiveTabUIState> {\r\n    static defaultSize: [number, number] = [120, 15];\r\n    className = \"live-tab\";\r\n    tabRects: TRect[] = [];\r\n    inTouch = false;\r\n    getTabRects(width: number, height: number) {\r\n        const {\r\n            // width,\r\n            // height,\r\n            multiline,\r\n            mode,\r\n            enums,\r\n            spacingX: spacingXIn,\r\n            spacingY: spacingYIn\r\n        } = this.state;\r\n        const margin = 4;\r\n        const minHeight = 10;\r\n        const count = enums.length;\r\n        let countPerLine = count;\r\n        let lines = 1;\r\n        let step = height / lines;\r\n        let interval = 0;\r\n        let rectWidth = 0;\r\n        const spacingX = spacingXIn * 0.5;\r\n        const spacingY = spacingYIn * 0.5;\r\n\r\n        if (multiline && height >= 2 * minHeight) {\r\n            lines = Math.max(1, Math.min(count, Math.floor(height / minHeight)));\r\n            countPerLine = Math.ceil(count / lines);\r\n            // if there's not enough height, increase the number of tabs per row\r\n            while (lines * countPerLine < count) {\r\n                countPerLine++;\r\n                if (lines > 1) lines--;\r\n            }\r\n            // if there's extra height, reduce the number of rows\r\n            while (lines * countPerLine > count && (lines - 1) * countPerLine >= count) {\r\n                lines--;\r\n            }\r\n            step = height / lines;\r\n        }\r\n        if (mode === \"equal\") {\r\n            interval = width / countPerLine;\r\n            rectWidth = interval - spacingX;\r\n            for (let i = 0; i < count; i++) {\r\n                this.tabRects[i] = [\r\n                    (i % countPerLine) * interval + spacingX * 0.5,\r\n                    Math.floor(i / countPerLine) * step + spacingY * 0.5,\r\n                    rectWidth,\r\n                    (height / lines) - spacingY\r\n                ];\r\n            }\r\n        } else {\r\n            const textWidths = [];\r\n            for (let i = 0; i < lines; i++) {\r\n                let total = 0;\r\n                let space = width;\r\n                for (let j = i * countPerLine; j < Math.min((i + 1) * countPerLine, count); j++) {\r\n                    const textDimensions = this.ctx.measureText(enums[j]);\r\n                    textWidths[j] = textDimensions.width;\r\n                    total += textWidths[j];\r\n                    space -= 2 * margin + spacingX;\r\n                }\r\n                let used = 0;\r\n                for (let j = i * countPerLine; j < Math.min((i + 1) * countPerLine, count); j++) {\r\n                    const rectSpace = textWidths[j] / total;\r\n                    this.tabRects[j] = [\r\n                        used + spacingX * 0.5,\r\n                        i * step + spacingY * 0.5,\r\n                        space * rectSpace + 2 * margin,\r\n                        height / lines - spacingY\r\n                    ];\r\n                    used += this.tabRects[j][2] + spacingX;\r\n                }\r\n            }\r\n        }\r\n        return this.tabRects;\r\n    }\r\n    paint() {\r\n        const {\r\n            active,\r\n            focus,\r\n            fontFamily,\r\n            fontSize,\r\n            fontFace,\r\n            activeBgColor,\r\n            activeBgOnColor,\r\n            bgColor,\r\n            bgOnColor,\r\n            borderColor,\r\n            focusBorderColor,\r\n            textColor,\r\n            textOnColor,\r\n            activeTextColor,\r\n            activeTextOnColor,\r\n            enums,\r\n            value\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const [width, height] = this.fullSize();\r\n        const tabRects = this.getTabRects(width, height);\r\n\r\n        const borderWidth = 0.5;\r\n\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.lineWidth = borderWidth;\r\n\r\n        const buttonBorderColor = focus ? focusBorderColor : borderColor;\r\n        for (let i = 0; i < enums.length; i++) {\r\n            const buttonBgColor = active ? (value === i ? activeBgOnColor : activeBgColor) : (value === i ? bgOnColor : bgColor);\r\n            ctx.fillStyle = buttonBgColor;\r\n            ctx.beginPath();\r\n            ctx.rect(...tabRects[i]);\r\n            ctx.fill();\r\n            ctx.strokeStyle = buttonBorderColor;\r\n            ctx.stroke();\r\n\r\n            ctx.font = `${fontFace === \"regular\" ? \"\" : fontFace} ${fontSize}px ${fontFamily}, sans-serif`;\r\n            ctx.textAlign = \"center\";\r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = active ? (value === i ? activeTextOnColor : activeTextColor) : (value === i ? textOnColor : textColor);\r\n            ctx.fillText(enums[i], tabRects[i][0] + tabRects[i][2] * 0.5, tabRects[i][1] + tabRects[i][3] * 0.5);\r\n        }\r\n    }\r\n    handlePointerDown = (e: PointerDownEvent) => {\r\n        this.inTouch = true;\r\n        for (let i = 0; i < this.tabRects.length; i++) {\r\n            const rect = this.tabRects[i];\r\n            if (e.x >= rect[0] && e.x <= rect[2] + rect[0] && e.y >= rect[1] && e.y <= rect[3] + rect[1]) {\r\n                this.setValueToOutput(i);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    handlePointerDrag = (e: PointerDragEvent) => {\r\n        this.handlePointerDown(e);\r\n    };\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        let addStep = 0;\r\n        if (e.key === \"ArrowUp\" || e.key === \"ArrowRight\") addStep = 1;\r\n        if (e.key === \"ArrowDown\" || e.key === \"ArrowLeft\") addStep = -1;\r\n        if (addStep !== 0) {\r\n            const newValue = this.object.toValidValue(this.state.value + this.state.step * addStep);\r\n            if (newValue !== this.state.value) this.setValueToOutput(newValue);\r\n        }\r\n    };\r\n}\r\n","import { Utils } from \"../sdk\";\r\nimport LiveObjectUI, { LiveObjectUIState, PointerDownEvent } from \"./base\";\r\nimport type LiveText from \"../objects/text\";\r\nimport type { LiveTextProps } from \"../objects/text\";\r\n\r\nexport interface LiveTextUIState extends LiveTextProps, LiveObjectUIState {}\r\nexport default class LiveTextUI extends LiveObjectUI<LiveText, LiveTextUIState> {\r\n    className = \"live-text\";\r\n    inTouch = false;\r\n    paint() {\r\n        const {\r\n            // width,\r\n            // height,\r\n            active,\r\n            focus,\r\n            fontFamily,\r\n            fontSize,\r\n            fontFace,\r\n            activeBgColor,\r\n            activeBgOnColor,\r\n            bgColor,\r\n            bgOnColor,\r\n            borderColor,\r\n            focusBorderColor,\r\n            textColor,\r\n            textOnColor,\r\n            activeTextColor,\r\n            activeTextOnColor,\r\n            mode,\r\n            text,\r\n            textOn,\r\n            value\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n\r\n        const borderWidth = 0.5;\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.lineWidth = borderWidth;\r\n\r\n        const buttonBgColor = active ? (value ? activeBgOnColor : activeBgColor) : (value ? bgOnColor : bgColor);\r\n        const buttonBorderColor = focus ? focusBorderColor : borderColor;\r\n\r\n        ctx.fillStyle = buttonBgColor;\r\n        if (mode === \"button\") {\r\n            Utils.fillRoundedRect(ctx, 0.5, 0.5, width - 1, height - 1, height * 0.5 - 1);\r\n        } else {\r\n            ctx.beginPath();\r\n            ctx.rect(0.5, 0.5, width - 1, height - 1);\r\n            ctx.fill();\r\n        }\r\n        ctx.lineWidth = 0.5;\r\n        ctx.strokeStyle = buttonBorderColor;\r\n        ctx.stroke();\r\n\r\n        ctx.font = `${fontFace === \"regular\" ? \"\" : fontFace} ${fontSize}px ${fontFamily}, sans-serif`;\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.fillStyle = active ? (value ? activeTextOnColor : activeTextColor) : (value ? textOnColor : textColor);\r\n        ctx.fillText(value && mode === \"toggle\" ? textOn : text, width * 0.5, height * 0.5);\r\n    }\r\n    handlePointerDown = (e: PointerDownEvent) => {\r\n        const { value, mode } = this.state;\r\n        this.inTouch = true;\r\n        this.setValueToOutput(mode === \"button\" ? 1 : 1 - +!!value);\r\n    };\r\n    handlePointerUp = () => {\r\n        const { mode } = this.state;\r\n        this.inTouch = false;\r\n        if (mode === \"button\") this.setValueToOutput(0);\r\n    };\r\n}\r\n","import LiveObjectUI, { LiveObjectUIState } from \"./base\";\r\nimport type LiveToggle from \"../objects/toggle\";\r\nimport type { LiveToggleProps } from \"../objects/toggle\";\r\n\r\nexport interface LiveToggleUIState extends LiveToggleProps, LiveObjectUIState {}\r\nexport default class LiveToggleUI extends LiveObjectUI<LiveToggle, LiveToggleUIState> {\r\n    static defaultSize: [number, number] = [30, 30];\r\n    className = \"live-toggle\";\r\n    paint() {\r\n        const {\r\n            // width,\r\n            // height,\r\n            active,\r\n            focus,\r\n            bgColor,\r\n            activeBgColor,\r\n            bgOnColor,\r\n            activeBgOnColor,\r\n            borderColor,\r\n            focusBorderColor,\r\n            value\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const borderWidth = 1;\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        ctx.lineWidth = borderWidth;\r\n\r\n        const buttonBgColor = active ? (value ? activeBgOnColor : activeBgColor) : (value ? bgOnColor : bgColor);\r\n        const buttonBorderColor = focus ? focusBorderColor : borderColor;\r\n\r\n        ctx.fillStyle = buttonBgColor;\r\n        ctx.beginPath();\r\n        ctx.rect(borderWidth, borderWidth, width - 2 * borderWidth, height - 2 * borderWidth);\r\n        ctx.fill();\r\n        ctx.strokeStyle = buttonBorderColor;\r\n        ctx.stroke();\r\n    }\r\n    handlePointerDown = () => {\r\n        this.setValueToOutput(1 - +!!this.state.value);\r\n    };\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import LiveNumbox from \"./objects/numbox\";\nimport LiveButton from \"./objects/button\";\nimport LiveDial from \"./objects/dial\";\nimport LiveSlider from \"./objects/slider\";\nimport LiveTab from \"./objects/tab\";\nimport LiveToggle from \"./objects/toggle\";\nimport LiveText from \"./objects/text\";\nimport LiveMeter from \"./objects/meter\";\nimport LiveGain from \"./objects/gain\";\n\nexport default async () => ({\n    numbox: LiveNumbox,\n    button: LiveButton,\n    dial: LiveDial,\n    slider: LiveSlider,\n    tab: LiveTab,\n    toggle: LiveToggle,\n    text: LiveText,\n    \"meter~\": LiveMeter,\n    \"gain~\": LiveGain\n});"],"names":[],"sourceRoot":""}